{"version":3,"file":"philter-manager.index.js","sources":["../../../../packages/manager/vite/modulepreload-polyfill","../../../../packages/common/build/src/api/cleanup-table.js","../../../../packages/common/build/src/data/cleanup-rule.js","../../../../packages/manager/src/api.ts","../../../../packages/common/build/src/api/base.js","../../../../packages/common/build/src/api/ruleset.js","../../../../packages/manager/src/toaster.tsx","../../../../packages/manager/src/util.ts","../../../../packages/manager/src/components/NumericInputLite.tsx","../../../../packages/manager/src/components/SelectCleanupAction.tsx","../../../../packages/manager/src/components/CleanupRulePicker.tsx","../../../../packages/manager/src/components/TableItemCleanup.tsx","../../../../packages/manager/src/components/PanelCategorizedItems.tsx","../../../../packages/manager/src/components/InputGroupAffixedFileName.tsx","../../../../packages/manager/src/components/PanelConfig.tsx","../../../../packages/common/build/src/api/config.js","../../../../packages/manager/src/components/PanelInformation.tsx","../../../../packages/common/build/src/api/statistics.js","../../../../packages/manager/src/components/PanelUncategorizedItems.tsx","../../../../packages/manager/src/App.tsx","../../../../packages/manager/src/index.tsx"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","/**\n * @file Defines routes for Cleanup Tables.\n */\nexport const CLEANUP_TABLES_CATEGORIZED_ROUTE = '/cleanup-tables/categorized';\nexport const CLEANUP_TABLES_UNCATEGORIZED_ROUTE = '/cleanup-tables/uncategorized';\n//# sourceMappingURL=cleanup-table.js.map","/**\n * Object whose keys are string values that make up the `CleanupAction` type.\n * Also used to check at runtime if a string belongs to `CleanupAction`.\n * The values are unused; they can be anything.\n */\nconst _cleanupActions = Object.freeze({\n    AUTO: 0,\n    BREAK: 0,\n    CLAN: 0,\n    CLST: 0,\n    DISC: 0,\n    DISP: 0,\n    GIFT: 0,\n    KEEP: 0,\n    MAKE: 0,\n    MALL: 0,\n    PULV: 0,\n    TODO: 0,\n    UNTN: 0,\n    USE: 0,\n});\n/**\n * Checks if the given value is a valid `CleanupAction` type.\n */\nexport const isCleanupAction = (value) => typeof value === 'string' &&\n    Object.prototype.hasOwnProperty.call(_cleanupActions, value);\n//# sourceMappingURL=cleanup-rule.js.map","/**\n * @file Methods for communicating with the relay script\n */\n\nimport {\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  CONFIG_ROUTE,\n  ErrorResponseBase,\n  INVENTORY_ROUTE,\n  PhilterConfig,\n  prepareRequestForSerialization,\n  ReadonlyCleanupRuleset,\n  RELAY_SCRIPT_FILE,\n  Request,\n  RequestMethodFor,\n  Response,\n  Routes,\n  RULESET_ROUTE,\n  STATISTICS_ROUTE,\n} from '@philter/common';\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * API error class. Thrown when the API returns an error response.\n */\nexport class ApiError extends Error {\n  /** Error code. This does _not_ map 1:1 to HTTP error codes. */\n  readonly code: number;\n  /** Error response object returned by the API. */\n  readonly response: unknown;\n\n  constructor(message: string, code: number, response: unknown) {\n    super(message);\n    this.code = code;\n    this.response = response;\n  }\n}\nApiError.prototype.name = 'ApiError';\n\n/**\n * Fetches data using routes and methods defined in `@philter/common`.\n * @param path Request route\n * @param method Request method\n * @return Asynchronous fetcher callback\n * @throws {ApiError}\n */\nconst fetchFromApi = async <\n  Path extends keyof Routes,\n  Method extends RequestMethodFor<Path>\n>(\n  path: Path,\n  method: Method,\n  body: Readonly<Omit<Request<Path, Method>, 'path' | 'method'>>\n) => {\n  const preparedRequest = prepareRequestForSerialization({\n    path,\n    method,\n    ...body,\n  });\n\n  // KoLmafia requires the `relay=true` parameter in order to execute JavaScript\n  // -based relay scripts.\n  const fetchResponse = await fetch(`/${RELAY_SCRIPT_FILE}?relay=true`, {\n    body: new URLSearchParams(preparedRequest),\n    method: 'POST',\n  });\n  if (!fetchResponse.ok) {\n    let text;\n    try {\n      text = await fetchResponse.text();\n    } catch (e) {\n      // Crude approach, but text() only fails under rare circumstances...\n      console.error(e);\n    }\n    throw new ApiError(fetchResponse.statusText, fetchResponse.status, text);\n  }\n\n  let response;\n  try {\n    response = (await fetchResponse.json()) as\n      | Response<Path, Method>\n      | ErrorResponseBase;\n  } catch (error) {\n    throw new ApiError(\n      `Invalid JSON returned from server (${error})\\nResponse: ${response}`,\n      500,\n      response\n    );\n  }\n\n  if ('error' in response) {\n    throw new ApiError(\n      response.error.message,\n      response.error.code,\n      response.error.message\n    );\n  }\n  return response;\n};\n\nexport const fetchGetCleanupTableCategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_CATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchGetCleanupTableUncategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchSaveCleanupRuleset = (cleanupRules: ReadonlyCleanupRuleset) =>\n  fetchFromApi(RULESET_ROUTE, 'post', {cleanupRules});\n\nexport const fetchInventoryState = () =>\n  fetchFromApi(INVENTORY_ROUTE, 'get', {});\n\nexport const fetchGetPhilterConfig = () =>\n  fetchFromApi(CONFIG_ROUTE, 'get', {});\n\nexport const fetchSavePhilterConfig = (\n  config: Readonly<PhilterConfig>,\n  shouldCopyDataFiles?: boolean\n) => fetchFromApi(CONFIG_ROUTE, 'post', {config, shouldCopyDataFiles});\n\nexport const fetchGetStatistics = () =>\n  fetchFromApi(STATISTICS_ROUTE, 'get', {});\n","/**\n * @file Defines base types for API requests and responses.\n */\nfunction isValidRequestMethod(value) {\n    return value === 'get' || value === 'patch' || value === 'post';\n}\nfunction isRequestBasePropertyName(value) {\n    return value === 'method' || value === 'path';\n}\n/**\n * Converts a `RequestBase` object to a flat object suitable for serialization.\n *\n * A client should serialize the returned value using `URLSearchParams()` before\n * sending it over the network.\n */\nexport function prepareRequestForSerialization(request) {\n    const serializedRequest = {};\n    for (const key of Object.keys(request)) {\n        // Known keys should not be serialized, but passed as-is.\n        if (isRequestBasePropertyName(key)) {\n            serializedRequest[key] = request[key];\n        }\n        else {\n            // All other keys should be serialized, even if their values are strings.\n            // JSON.stringify() can return undefined if the input is undefined.\n            // TypeScript currently doesn't check this, so we must do so manually.\n            const serializedValue = JSON.stringify(request[key]);\n            // Skip undefined fields\n            if (serializedValue !== undefined) {\n                serializedRequest[key] = serializedValue;\n            }\n        }\n    }\n    return serializedRequest;\n}\n/**\n * Converts a flat object to a `RequestBase`.\n *\n * A server should call this on the return value of `formFields()`\n * (analogous to `request.body` in Express.js).\n * @param wrappedRequest Wrapped request object\n * @throws {Error} If any `RequestBase` properties are missing or invalid\n */\nexport function unwrapDeserializedRequest(wrappedRequest) {\n    // Cast to Partial<> so that TypeScript type-checks our property access\n    const uncheckedRequest = wrappedRequest;\n    if (typeof uncheckedRequest.method !== 'string') {\n        throw new Error('Missing URL/form parameter: method');\n    }\n    else if (!isValidRequestMethod(uncheckedRequest.method)) {\n        throw new Error(`Invalid URL/form parameter: method=${uncheckedRequest.method}`);\n    }\n    if (typeof uncheckedRequest.path !== 'string') {\n        throw new Error('Missing URL/form parameter: path');\n    }\n    const request = {};\n    for (const key of Object.keys(wrappedRequest)) {\n        // Known keys are passed as-is.\n        // All other keys are deserialized.\n        request[key] = isRequestBasePropertyName(key)\n            ? wrappedRequest[key]\n            : JSON.parse(wrappedRequest[key]);\n    }\n    return request;\n}\n//# sourceMappingURL=base.js.map","/**\n * @file Defines requests and responses for rulesets.\n */\nexport const RULESET_ROUTE = '/ruleset';\n//# sourceMappingURL=ruleset.js.map","/**\n * @file Provides methods for toast-based notifications.\n */\n\nimport {Toaster} from '@blueprintjs/core';\nimport React from 'react';\nimport {ApiError} from './api';\n\n/** Globally shared `<Toaster>` instance for displaying notifications. */\nexport const toaster = Toaster.create({maxToasts: 1});\n\n/**\n * Render `error` as a toast message.\n * @param error Error object. If this is a falsy value, the toast message will\n *    be removed.\n * @param errorMessage Message to show\n * @param key Used to uniquely identify the toast message\n */\nexport const setErrorToast = (\n  key: string,\n  error: unknown,\n  errorMessage: string\n): void => {\n  if (error) {\n    toaster.show(\n      {\n        icon: 'warning-sign',\n        intent: 'warning',\n        message:\n          error instanceof ApiError ? (\n            <>\n              {errorMessage}: {error.message}\n              <br />\n              Response: {String(error.response)}\n            </>\n          ) : (\n            `${errorMessage}: ${error}`\n          ),\n      },\n      key\n    );\n  } else {\n    toaster.dismiss(key);\n  }\n};\n\n/**\n * Display an informational toast message.\n * @param message Message to show\n */\nexport const showInfoToast = (message: string): void => {\n  toaster.show({icon: 'info-sign', message});\n};\n\n/**\n * Display a toast message to indicate that the app is saving something.\n * @param key Used to uniquely identify the toast message\n * @param isSaving Whether to show or hide the toast\n * @param message Message to show\n */\nexport const setSavingToast = (\n  key: string,\n  isSaving: boolean,\n  message: string\n): void => {\n  if (isSaving) {\n    toaster.show({icon: 'floppy-disk', intent: 'primary', message}, key);\n  } else {\n    toaster.dismiss(key);\n  }\n};\n","/**\n * @file Utilities that don't quite fit anywhere else.\n */\n\nimport {CleanupAction, ItemInfo} from '@philter/common';\n\n/**\n * Maximum possible mallsell price for any item.\n * This is a limit enforced by KoL.\n */\nexport const MAX_MALL_PRICE = 999_999_999 as const;\n\n/**\n * Zero-width space character. This can be used to allow browsers to break long\n * words across multiple lines, or as an empty placeholder.\n */\nexport const ZWSP = '\\u200B';\n\n/**\n * @param action Cleanup action\n * @return Human-readable short name for the action\n */\nexport const cleanupActionToString = (action: CleanupAction): string => {\n  switch (action) {\n    case 'AUTO':\n      return 'Autosell';\n    case 'BREAK':\n      return 'Break apart';\n    case 'CLAN':\n      return 'Put in clan stash';\n    case 'CLST':\n      return 'Closet';\n    case 'DISC':\n      return 'Discard';\n    case 'DISP':\n      return 'Display';\n    case 'GIFT':\n      return 'Send as gift';\n    case 'KEEP':\n      return 'Keep all';\n    case 'MAKE':\n      return 'Craft';\n    case 'MALL':\n      return 'Mall sale';\n    case 'PULV':\n      return 'Pulverize';\n    case 'TODO':\n      return 'Reminder';\n    case 'UNTN':\n      return 'Untinker';\n    case 'USE':\n      return 'Use';\n    default:\n      // If we forget an action, TypeScript will catch this as a compile error\n      return ((n: never) => n)(action);\n  }\n};\n\n/**\n * @param item Item type to check\n * @return Whether Philter Manager should warn about pulverizing the item\n */\nexport const shouldWarnOnPulverize = (item: Readonly<ItemInfo>): boolean =>\n  !item.isTradable;\n\n/**\n * Identity function that returns the first argument as-is.\n * This is primarily intended to perform compile-time type-checks against union\n * types or enums.\n * **This does NOT perform any runtime type checks!**\n * @param value\n * @return `value` unmodified\n */\nexport const typeCheck = <T>(value: T): T => value;\n","import {Classes} from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\nimport './NumericInputLite.css';\n\ninterface NumericInputLiteProps extends React.ComponentProps<'input'> {\n  /**\n   * Whether this component should take up the full width of its parent\n   * container.\n   */\n  fill?: boolean;\n  small?: boolean;\n}\n\n/**\n * A thin wrapper for `<input type=\"number\">` that is styled like an\n * `<InputGroup>` from Blueprint.js.\n */\nexport const NumericInputLite = ({\n  className,\n  fill,\n  /**\n   * Whether this input should use \"small\" styles.\n   */\n  small,\n  ...props\n}: NumericInputLiteProps) => (\n  <input\n    className={classNames(\n      'NumericInputLite',\n      Classes.INPUT,\n      small && Classes.SMALL,\n      fill && Classes.FILL,\n      className\n    )}\n    dir=\"auto\"\n    type=\"number\"\n    {...props}\n  />\n);\n","import {Classes, Colors} from '@blueprintjs/core';\nimport {CleanupAction, isCleanupAction, ItemInfo} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo} from 'react';\nimport {shouldWarnOnPulverize, typeCheck} from '../util';\nimport './SelectCleanupAction.css';\n\n/**\n * A fallback value used to denote uncategorized items in the `<select>`.\n */\nexport const UNKNOWN_CLEANUP_ACTION = 'UNKN';\nexport type CleanupActionOrUnknown =\n  | CleanupAction\n  | typeof UNKNOWN_CLEANUP_ACTION;\n\nconst isCleanupActionOrUnknown = (\n  value: unknown\n): value is CleanupActionOrUnknown =>\n  value === UNKNOWN_CLEANUP_ACTION || isCleanupAction(value);\n\ninterface SelectCleanupActionPropsBase {\n  item: Readonly<ItemInfo>;\n  onChange: (value: CleanupActionOrUnknown) => void;\n  value: CleanupActionOrUnknown;\n}\n\ninterface SelectCleanupActionProps\n  extends SelectCleanupActionPropsBase,\n    Omit<React.ComponentProps<'div'>, keyof SelectCleanupActionPropsBase> {}\n\n/**\n * `<select>` element for picking a cleanup action.\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const SelectCleanupAction = memo(function SelectCleanupAction({\n  className,\n  item,\n  onChange,\n  value,\n  ...restProps\n}: SelectCleanupActionProps) {\n  return (\n    <div\n      className={classNames(\n        Classes.HTML_SELECT,\n        'SelectCleanupAction',\n        className\n      )}\n      {...restProps}\n    >\n      <select\n        onChange={e =>\n          isCleanupActionOrUnknown(e.target.value) && onChange(e.target.value)\n        }\n        value={value}\n      >\n        <option\n          value={typeCheck<CleanupActionOrUnknown>(UNKNOWN_CLEANUP_ACTION)}\n        >\n          (uncategorized)\n        </option>\n        <option value={typeCheck<CleanupActionOrUnknown>('KEEP')}>\n          Keep all\n        </option>\n        {item.canMall && (\n          <option value={typeCheck<CleanupActionOrUnknown>('MALL')}>\n            Mall sale\n          </option>\n        )}\n        {item.canBreak && (\n          <option value={typeCheck<CleanupActionOrUnknown>('BREAK')}>\n            Break apart\n          </option>\n        )}\n        {item.canAutosell && (\n          <option value={typeCheck<CleanupActionOrUnknown>('AUTO')}>\n            Autosell\n          </option>\n        )}\n        {item.canDiscard && (\n          <option\n            style={{color: Colors.ORANGE2}}\n            value={typeCheck<CleanupActionOrUnknown>('DISC')}\n          >\n            Discard\n          </option>\n        )}\n        {item.canGift && (\n          <option value={typeCheck<CleanupActionOrUnknown>('GIFT')}>\n            Send as gift\n          </option>\n        )}\n        {item.canStash && (\n          <option value={typeCheck<CleanupActionOrUnknown>('CLAN')}>\n            Put in clan stash\n          </option>\n        )}\n        {item.canPulverize && (\n          <option\n            style={\n              shouldWarnOnPulverize(item) ? {color: Colors.ORANGE2} : undefined\n            }\n            value={typeCheck<CleanupActionOrUnknown>('PULV')}\n          >\n            Pulverize\n          </option>\n        )}\n        {item.canMake && (\n          <option value={typeCheck<CleanupActionOrUnknown>('MAKE')}>\n            Craft...\n          </option>\n        )}\n        {item.canUntinker && (\n          <option value={typeCheck<CleanupActionOrUnknown>('UNTN')}>\n            Untinker\n          </option>\n        )}\n        {item.canUse && (\n          <option value={typeCheck<CleanupActionOrUnknown>('USE')}>Use</option>\n        )}\n        {item.canCloset && (\n          <option value={typeCheck<CleanupActionOrUnknown>('CLST')}>\n            Closet\n          </option>\n        )}\n        {item.canDisplay && (\n          <option value={typeCheck<CleanupActionOrUnknown>('DISP')}>\n            Display\n          </option>\n        )}\n        <option value={typeCheck<CleanupActionOrUnknown>('TODO')}>\n          Reminder\n        </option>\n      </select>\n    </div>\n  );\n});\n","import {Checkbox, Classes, FormGroup, Intent} from '@blueprintjs/core';\nimport {ItemInfo, CleanupRule} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {useCallback} from 'react';\nimport {MAX_MALL_PRICE, shouldWarnOnPulverize} from '../util';\nimport './CleanupRulePicker.css';\nimport {NumericInputLite} from './NumericInputLite';\nimport {\n  CleanupActionOrUnknown,\n  SelectCleanupAction,\n  UNKNOWN_CLEANUP_ACTION,\n} from './SelectCleanupAction';\n\n// Note: We use one condition per each conditional option, which allows the\n// backend to decide what can be done with each item.\nexport const CleanupRulePicker = ({\n  item,\n  rule,\n  onChange,\n}: {\n  item: Readonly<ItemInfo>;\n  /**\n   * Callback that accepts a new rule, or `null` if the user changed the rule\n   * to \"(uncategorized)\".\n   * The argument is the new rule, or an updater function that takes the\n   * previous rule as argument and returns a new rule.\n   */\n  onChange?: (\n    newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n  ) => void;\n  rule: Readonly<CleanupRule> | null;\n}): JSX.Element => {\n  const handleActionChange = useCallback(\n    (action: CleanupActionOrUnknown) => {\n      if (!onChange) return;\n      onChange(oldRule => {\n        if (action === oldRule?.action) return oldRule;\n\n        // If the action type changes to another action that requires additional\n        // parameters, initialize these parameters.\n        // Note: This means that additional parameters are NOT remembered when\n        // the user switches an action. This may be undesirable...perhaps use\n        // some internal state to maintain this, or let the parent component\n        // handle it?\n        if (action === UNKNOWN_CLEANUP_ACTION) {\n          return null;\n        } else if (action === 'GIFT') {\n          return {...oldRule, action, message: '', recipent: ''};\n        } else if (action === 'MAKE') {\n          return {\n            ...oldRule,\n            action,\n            shouldUseCreatableOnly: false,\n            targetItem: '',\n          };\n        } else if (action === 'MALL') {\n          return {...oldRule, action, minPrice: 0};\n        } else if (action === 'TODO') {\n          return {...oldRule, action, message: ''};\n        } else {\n          return {...oldRule, action};\n        }\n      });\n    },\n    [onChange]\n  );\n\n  let helperText;\n  let intent;\n\n  if (rule) {\n    if (rule.action === 'PULV' && shouldWarnOnPulverize(item)) {\n      helperText = 'You will pulverize an untradable item.';\n      intent = Intent.WARNING;\n    } else if (rule.action === 'DISC') {\n      helperText = 'You will gain no meat from discarding.';\n      intent = Intent.WARNING;\n    }\n  }\n\n  return (\n    <FormGroup\n      className=\"CleanupRulePicker\"\n      helperText={helperText}\n      intent={intent}\n    >\n      {/* Wrap child elements inside a <div>. This separates them from the\n          helper text <div>, which is injected by the outer <FormGroup>.\n          This separation allows the children to be arranged on a single \"row\"\n          with the helper text under them. */}\n      <div className=\"CleanupRulePicker__Inputs\">\n        <SelectCleanupAction\n          className=\"CleanupRulePicker__Child\"\n          item={item}\n          onChange={handleActionChange}\n          value={rule ? rule.action : UNKNOWN_CLEANUP_ACTION}\n        />\n\n        {!rule ? null : rule.action === 'GIFT' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftRecipent\"\n              helperText={!rule.recipent && 'No recipent name'}\n              inline\n              intent={rule.recipent ? undefined : Intent.DANGER}\n              label=\"to\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  !rule.recipent && Classes.INTENT_DANGER,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e => onChange?.({...rule, recipent: e.target.value})}\n                placeholder=\"Player name\"\n                type=\"text\"\n                value={rule.recipent}\n              />\n            </FormGroup>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftMessage\"\n              inline\n              label=\"with\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e => onChange?.({...rule, message: e.target.value})}\n                placeholder=\"Kmail message\"\n                type=\"text\"\n                value={rule.message}\n              />\n            </FormGroup>\n          </>\n        ) : rule.action === 'MAKE' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputMakeTarget\"\n              helperText={!rule.targetItem && 'No item name'}\n              inline\n              intent={!rule.targetItem ? Intent.DANGER : undefined}\n              label=\"into\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e =>\n                  onChange?.({...rule, targetItem: e.target.value})\n                }\n                placeholder=\"Item name\"\n                type=\"text\"\n                value={rule.targetItem}\n              />\n            </FormGroup>\n            <Checkbox\n              checked={rule.shouldUseCreatableOnly}\n              className=\"CleanupRulePicker__Child CleanupRulePicker__Checkbox\"\n              onChange={e =>\n                onChange?.({\n                  ...rule,\n                  shouldUseCreatableOnly: e.currentTarget.checked,\n                })\n              }\n            >\n              <span className=\"CleanupRulePicker__CheckBoxText\">\n                Only use available ingredients\n              </span>\n            </Checkbox>\n          </>\n        ) : rule.action === 'MALL' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputMallMinPrice\"\n            inline\n            label=\"min price\"\n          >\n            <NumericInputLite\n              max={MAX_MALL_PRICE}\n              min={0}\n              onChange={event => {\n                const value = Number(event.target.value);\n                if (Number.isInteger(value)) {\n                  onChange?.({\n                    ...rule,\n                    minPrice: Math.max(0, Math.min(MAX_MALL_PRICE, value)),\n                  });\n                }\n              }}\n              value={rule.minPrice}\n            />\n          </FormGroup>\n        ) : rule.action === 'TODO' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputTodoMessage\"\n            inline\n            label=\"with message:\"\n          >\n            <input\n              className={classNames(\n                Classes.INPUT,\n                Classes.SMALL,\n                'CleanupRulePicker__InputText'\n              )}\n              onChange={e => onChange?.({...rule, message: e.target.value})}\n              placeholder=\"Enter reminder message\"\n              type=\"text\"\n              value={rule.message}\n            />\n          </FormGroup>\n        ) : null}\n      </div>\n    </FormGroup>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  Classes,\n  Colors,\n  ControlGroup,\n  Icon,\n  IconName,\n  InputGroup,\n  Intent,\n  UL,\n} from '@blueprintjs/core';\nimport {Classes as Popover2Classes, Popover2} from '@blueprintjs/popover2';\nimport {\n  CleanupRule,\n  CleanupRuleset,\n  ItemInfo,\n  ReadonlyCleanupRuleset,\n  ReadonlyInventoryState,\n} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useMemo, useState} from 'react';\nimport {\n  AutoSizer,\n  Column,\n  SortDirection,\n  SortDirectionType,\n  Table,\n  TableHeaderRenderer,\n} from 'react-virtualized';\nimport {CleanupRulePicker} from './CleanupRulePicker';\nimport {NumericInputLite} from './NumericInputLite';\nimport './TableItemCleanup.css';\n\n/* eslint-disable react/no-unescaped-entities */\n\n/** Name keys of sortable columns in `<TableItemCleanup/>`. */\nconst enum SortableColumnKey {\n  ITEM_NAME = 'ITEM_NAME',\n  CLOSET_AMOUNT = 'CLOSET_AMOUNT',\n  STORAGE_AMOUNT = 'STORAGE_AMOUNT',\n  DISPLAY_CASE_AMOUNT = 'DISPLAY_CASE_AMOUNT',\n  MALL_PRICE = 'MALL_PRICE',\n}\n\n/** Assertion function for checking the exhaustiveness of switch statements. */\nconst assertInvalidSortableColumnKey = (key: never) => {\n  throw new Error(`${key} is not a key for a sortable column`);\n};\n\n/**\n * Sorts an array of `ItemInfo` objects in-place for the given column key.\n * @param items Array of items\n * @param inventory Current inventory state\n * @param dataKey Column key\n * @return Sorted array of items\n */\nconst sortItemsByColumn = (\n  items: Readonly<ItemInfo>[],\n  inventory: ReadonlyInventoryState,\n  dataKey: SortableColumnKey\n) => {\n  switch (dataKey) {\n    case SortableColumnKey.ITEM_NAME:\n      return items.sort((itemA, itemB) => itemA.name.localeCompare(itemB.name));\n    case SortableColumnKey.CLOSET_AMOUNT:\n      return items.sort(\n        (itemA, itemB) =>\n          (inventory.closet[itemA.id] || 0) - (inventory.closet[itemB.id] || 0)\n      );\n    case SortableColumnKey.STORAGE_AMOUNT:\n      return items.sort(\n        (itemA, itemB) =>\n          (inventory.storage[itemA.id] || 0) -\n          (inventory.storage[itemB.id] || 0)\n      );\n    case SortableColumnKey.DISPLAY_CASE_AMOUNT:\n      return items.sort(\n        (itemA, itemB) =>\n          (inventory.displayCase[itemA.id] || 0) -\n          (inventory.displayCase[itemB.id] || 0)\n      );\n    case SortableColumnKey.MALL_PRICE:\n      return items.sort(\n        (itemA, itemB) => (itemA.mallPrice || 0) - (itemB.mallPrice || 0)\n      );\n    default:\n      assertInvalidSortableColumnKey(dataKey);\n  }\n};\n\ninterface SortState {\n  sortBy: SortableColumnKey | undefined;\n  sortDirection: SortDirectionType;\n}\n\n/**\n * @param prevState Previous sort state\n * @return State reducer for `SortState`\n */\nconst makeSortStateReducer =\n  (activatedColumnKey: SortableColumnKey) =>\n  (prevState: SortState): SortState => {\n    // Was either unsorted, or was sorted by another column\n    if (!prevState.sortBy || prevState.sortBy !== activatedColumnKey) {\n      return {sortBy: activatedColumnKey, sortDirection: SortDirection.ASC};\n    }\n\n    // User re-seleced a column that is already active\n    // Cycle between ASC -> DESC -> (unsorted)\n    return prevState.sortDirection === SortDirection.ASC\n      ? {sortBy: prevState.sortBy, sortDirection: SortDirection.DESC}\n      : {sortBy: undefined, sortDirection: SortDirection.ASC};\n  };\n\n/** Custom hook for managing the sort state of `<TableItemCleanup/>` */\nconst useSortState = () => {\n  const [sortState, setSortState] = useState<SortState>({\n    sortBy: undefined,\n    sortDirection: SortDirection.ASC,\n  });\n\n  return {\n    ...sortState,\n    updateSortState: useCallback(\n      ({sortBy}: {sortBy: string}) =>\n        setSortState(makeSortStateReducer(sortBy as SortableColumnKey)),\n      []\n    ),\n  };\n};\n\n/**\n * Returns the names of sorting indicator icons to be used for each sortable column.\n * @param dataKey Name keys of sortable columns\n * @return Object with two properties, `asc` and `desc`, which specify icon\n *    names to use for the column associated with the `key`\n */\nconst getSortingIconNames = (\n  dataKey: SortableColumnKey\n): {\n  /** Icon to use if the column is sorted in ascending order */\n  asc: IconName;\n  /** Icon to use if the column is sorted in descending order */\n  desc: IconName;\n} => {\n  switch (dataKey) {\n    case SortableColumnKey.ITEM_NAME:\n      return {asc: 'sort-alphabetical', desc: 'sort-alphabetical-desc'};\n    case SortableColumnKey.CLOSET_AMOUNT:\n    case SortableColumnKey.STORAGE_AMOUNT:\n    case SortableColumnKey.DISPLAY_CASE_AMOUNT:\n    case SortableColumnKey.MALL_PRICE:\n      return {asc: 'sort-numerical', desc: 'sort-numerical-desc'};\n  }\n  assertInvalidSortableColumnKey(dataKey);\n};\n\nconst sortableHeaderRenderer: TableHeaderRenderer = ({\n  dataKey,\n  disableSort,\n  label,\n  sortBy,\n  sortDirection,\n}) => {\n  const labelNode = (\n    <span className=\"TableItemCleanup__HeaderCellLabel\">{label}</span>\n  );\n  if (disableSort) return labelNode;\n\n  let iconType: IconName;\n  let iconIntent: Intent | undefined;\n  let iconColor;\n  if (sortBy === dataKey) {\n    iconIntent = 'primary';\n    iconType = getSortingIconNames(dataKey as SortableColumnKey)[\n      sortDirection === SortDirection.ASC ? 'asc' : 'desc'\n    ];\n  } else {\n    iconColor = Colors.GRAY4;\n    iconType = 'double-caret-vertical';\n  }\n\n  return (\n    <>\n      {labelNode}\n      <Icon color={iconColor} icon={iconType} intent={iconIntent} />\n    </>\n  );\n};\n\n/**\n * Adds a zero-width space (ZWSP) after each comma (`,`) in the given string.\n * This allows the `overflow-wrap: break-word` CSS rule to break long numbers\n * across multiple lines.\n */\nconst addZwspAfterComma = (str: string) => str.replace(/,/g, ',\\u200B');\n\n/**\n * Launches the in-game item description page in a popup window.\n * @param descid Item descid\n */\nconst itemDescriptionPopup = (descid: string) => {\n  window\n    .open(`/desc_item.php?whichitem=${descid}`, 'name', 'height=200,width=214')\n    ?.focus();\n};\n\n/**\n * Tag for items whose mall price is at minimum value.\n *\n * This is a lightweight replica of Blueprint.js's `<Tag>` component.\n */\nconst MinMallPriceTag = () => (\n  <span\n    className={classNames(\n      Classes.TAG,\n      Classes.MINIMAL,\n      Classes.INTENT_PRIMARY,\n      'TableItemCleanup__ColumnMallPrice--minimum'\n    )}\n    title=\"Is at minimum mall price\"\n  >\n    min\n  </span>\n);\n\nexport type RuleChangeHandler = (\n  itemId: number,\n  newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n) => void;\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellItemName = memo(function CellItemName({\n  inventory,\n  item,\n}: {\n  inventory: ReadonlyInventoryState;\n  item: Readonly<ItemInfo>;\n}) {\n  return (\n    <>\n      <a\n        className={classNames(\n          Classes.BUTTON,\n          Classes.MINIMAL,\n          'TableItemCleanup__ItemImageLink'\n        )}\n        onClick={() => itemDescriptionPopup(item.descid)}\n        tabIndex={0}\n        title=\"View item description\"\n      >\n        <img\n          className=\"TableItemCleanup__ItemImage\"\n          alt={item.name}\n          src={`/images/itemimages/${item.image}`}\n        />\n      </a>\n      <a\n        className={classNames(\n          Classes.BUTTON,\n          Classes.MINIMAL,\n          'TableItemCleanup__ItemNameLink'\n        )}\n        href={`https://kol.coldfront.net/thekolwiki/index.php/Special:Search?search=${item.name}&go=Go`}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        tabIndex={0}\n        title=\"Visit KoL wiki page\"\n      >\n        <span dangerouslySetInnerHTML={{__html: item.name}}></span>\n        {inventory.inventory[item.id] > 0 && (\n          <>\n            {' '}\n            <i>({inventory.inventory[item.id]})</i>\n          </>\n        )}\n      </a>\n    </>\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellMallPrice = memo(function CellMallPrice({\n  item,\n}: {\n  item: Readonly<ItemInfo>;\n}) {\n  return (\n    <>\n      {item.mallPrice && addZwspAfterComma(item.mallPrice.toLocaleString())}\n      {item.mallPrice !== null && item.isMallPriceAtMinimum && (\n        <MinMallPriceTag />\n      )}\n    </>\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellKeepAmount = memo(function CellKeepAmount({\n  item,\n  onRuleChange,\n  rule,\n}: {\n  item: Readonly<ItemInfo>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<CleanupRule> | undefined;\n}) {\n  return (\n    <NumericInputLite\n      className=\"TableItemCleanup__InputKeepAmount\"\n      disabled={!rule || rule.action === 'KEEP'}\n      fill\n      min={0}\n      onChange={event => {\n        const value = Number(event.target.value);\n        if (Number.isInteger(value)) {\n          onRuleChange(item.id, rule => rule && {...rule, keepAmount: value});\n        }\n      }}\n      value={rule?.keepAmount || 0}\n    />\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellItemAction = memo(function CellItemAction({\n  item,\n  onRuleChange,\n  rule,\n}: {\n  item: Readonly<ItemInfo>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<CleanupRule> | undefined;\n}) {\n  return (\n    <CleanupRulePicker\n      item={item}\n      onChange={newRuleOrReducer => onRuleChange(item.id, newRuleOrReducer)}\n      rule={rule || null}\n    />\n  );\n});\n\ninterface TableItemCleanupPropsBase {\n  /**\n   * Cleanup ruleset.\n   * If an item in `items` does not have a rule here, a default rule (\"UNKN\") is\n   * used.\n   */\n  cleanupRules: ReadonlyCleanupRuleset;\n  /**\n   * Whether the Reset button is disabled.\n   */\n  disableReset?: boolean;\n  /**\n   * Whether the Save button is disabled.\n   */\n  disableSave?: boolean;\n  /** Inventory state. Used to show item quantities for each row. */\n  inventory: ReadonlyInventoryState;\n  /** Items to display in the table. */\n  items: readonly Readonly<ItemInfo>[];\n  /**\n   * Callback that is called when a rule is modified.\n   * The argument is a function that takes the previous ruleset as argument and\n   * returns a new ruleset.\n   *\n   * This implementation is necessary to prevent the entire table from being\n   * re-rendered (causing lag) on every input change.\n   */\n  onChange?: (\n    updater: (prevCleanupRules: CleanupRuleset) => CleanupRuleset\n  ) => void;\n  /**\n   * Called when the user clicks the Reset button.\n   */\n  onReset?: () => void;\n  /**\n   * Called when the user edits a rule for an item.\n   * If not given, the default implementation calls `onChange` instead.\n   */\n  onRuleChange?: RuleChangeHandler;\n  /**\n   * Called when the user clicks the Save button.\n   */\n  onSave?: () => void;\n}\n\ninterface TableItemCleanupProps\n  extends TableItemCleanupPropsBase,\n    Omit<React.ComponentProps<'section'>, keyof TableItemCleanupPropsBase> {}\n\n// eslint-disable-next-line prefer-arrow-callback\nexport const TableItemCleanup = memo(function TableItemCleanup({\n  // className is already provided by React.ComponentProps<'section'>\n  // eslint-disable-next-line react/prop-types\n  className,\n  cleanupRules,\n  disableReset,\n  disableSave,\n  inventory,\n  items,\n  onChange,\n  onReset,\n  onRuleChange,\n  onSave,\n  ...restProps\n}: TableItemCleanupProps) {\n  const defaultRuleChangeHandler = useCallback(\n    (\n      itemId: number,\n      newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n    ) =>\n      onChange?.(prevCleanupRules => {\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [onChange]\n  );\n  const handleRuleChange = onRuleChange || defaultRuleChangeHandler;\n\n  // Sorting and filtering\n  const {sortBy, sortDirection, updateSortState} = useSortState();\n\n  const [filterText, setFilterText] = useState('');\n  const finalItems = useMemo(() => {\n    let finalItems;\n\n    // Filter first, sort later. Since our filter code is simple, this is likely\n    // faster than the other way around.\n    if (filterText) {\n      const filterTextLower = filterText.trim().toLowerCase();\n      finalItems = items.filter(item =>\n        item.name.toLowerCase().includes(filterTextLower)\n      );\n    } else {\n      finalItems = [...items];\n    }\n\n    if (sortBy) {\n      sortItemsByColumn(finalItems, inventory, sortBy);\n      if (sortDirection === SortDirection.DESC) {\n        finalItems.reverse();\n      }\n    }\n\n    return finalItems;\n  }, [filterText, inventory, items, sortBy, sortDirection]);\n\n  const rowGetter = useCallback(\n    ({index}: {index: number}) => finalItems[index],\n    [finalItems]\n  );\n\n  const rowClassNameGetter = useCallback(\n    ({index}: {index: number}) =>\n      index === -1 ? 'TableItemCleanup__HeaderRow' : 'TableItemCleanup__Row',\n    []\n  );\n\n  /** Helper function for making `<Column/>` elements. */\n  const makeColumn = useCallback(\n    ({\n      className,\n      getData,\n      renderCell,\n      ...restProps\n    }: Omit<\n      React.ComponentProps<typeof Column>,\n      'cellDataGetter' | 'cellRenderer' | 'flexShrink'\n    > & {\n      /** Optional callback to be used by the `cellDataGetter` */\n      getData?: (item: Readonly<ItemInfo>) => number;\n      /** Optional callback to be used by the `cellRenderer` */\n      renderCell?: (item: Readonly<ItemInfo>) => React.ReactNode;\n    }) => (\n      <Column\n        cellDataGetter={getData && (props => getData(props.rowData))}\n        cellRenderer={renderCell && (props => renderCell(props.rowData))}\n        className={classNames('TableItemCleanup__Cell', className)}\n        flexShrink={0}\n        {...restProps}\n      />\n    ),\n    []\n  );\n\n  /** Helper function for making sortable `<Column/>` elements. */\n  const makeSortableColumn = useCallback(\n    ({\n      className,\n      ...restProps\n    }: Omit<Parameters<typeof makeColumn>[0], 'headerRenderer'>) =>\n      makeColumn({\n        className: classNames(\n          sortBy === restProps.dataKey && 'TableItemCleanup__Cell--Sorted',\n          className\n        ),\n        headerRenderer: sortableHeaderRenderer,\n        ...restProps,\n      }),\n    [makeColumn, sortBy]\n  );\n\n  const columns = useMemo(\n    () => [\n      makeSortableColumn({\n        className: 'TableItemCleanup__ColumnItemName',\n        dataKey: SortableColumnKey.ITEM_NAME,\n        flexGrow: 5,\n        label: 'Item (Amount)',\n        // eslint-disable-next-line react/display-name\n        renderCell: item => <CellItemName inventory={inventory} item={item} />,\n        width: 200,\n      }),\n      makeSortableColumn({\n        className: 'TableItemCleanup__ColumnClosetAmount',\n        dataKey: SortableColumnKey.CLOSET_AMOUNT,\n        getData: item => inventory.closet[item.id] || 0,\n        label: <abbr title=\"Amount in Closet\">C</abbr>,\n        width: 40,\n      }),\n      makeSortableColumn({\n        className: 'TableItemCleanup__ColumnStorageAmount',\n        dataKey: SortableColumnKey.STORAGE_AMOUNT,\n        getData: item => inventory.storage[item.id] || 0,\n        label: <abbr title=\"Amount in Storage\">S</abbr>,\n        width: 40,\n      }),\n      makeSortableColumn({\n        className: 'TableItemCleanup__ColumnDisplayCaseAmount',\n        dataKey: SortableColumnKey.DISPLAY_CASE_AMOUNT,\n        getData: item => inventory.displayCase[item.id] || 0,\n        label: <abbr title=\"Amount in Display Case\">D</abbr>,\n        width: 40,\n      }),\n      makeSortableColumn({\n        className: 'TableItemCleanup__ColumnMallPrice',\n        dataKey: SortableColumnKey.MALL_PRICE,\n        flexGrow: 1,\n        label: <abbr title=\"5th lowest mall price\">Price</abbr>,\n        // eslint-disable-next-line react/display-name\n        renderCell: item => <CellMallPrice item={item} />,\n        width: 80,\n      }),\n      makeColumn({\n        // eslint-disable-next-line react/display-name\n        renderCell: item => (\n          <CellKeepAmount\n            item={item}\n            onRuleChange={handleRuleChange}\n            rule={cleanupRules[item.id]}\n          />\n        ),\n        className: 'TableItemCleanup__ColumnKeepAmount',\n        dataKey: 'keepAmount',\n        disableSort: true,\n        label: 'Keep',\n        width: 70,\n      }),\n      makeColumn({\n        // eslint-disable-next-line react/display-name\n        renderCell: item => (\n          <CellItemAction\n            item={item}\n            onRuleChange={handleRuleChange}\n            rule={cleanupRules[item.id]}\n          />\n        ),\n        className: 'TableItemCleanup__ColumnAction',\n        dataKey: 'action',\n        disableSort: true,\n        flexGrow: 1,\n        label: 'Action',\n        width: 440,\n      }),\n    ],\n    [cleanupRules, handleRuleChange, inventory, makeColumn, makeSortableColumn]\n  );\n\n  const editorButtons = useMemo(\n    () => (\n      <ButtonGroup className=\"TableItemCleanup__EditorButtons\">\n        <Button\n          disabled={disableSave}\n          icon=\"saved\"\n          onClick={onSave}\n          text=\"Save all\"\n        />\n        <Button\n          disabled={disableReset}\n          icon=\"reset\"\n          onClick={onReset}\n          text=\"Discard changes\"\n        />\n        <Popover2\n          className=\"TableItemCleanup__PopperFix\"\n          popoverClassName={Popover2Classes.POPOVER2_CONTENT_SIZING}\n          content={\n            <p>\n              Select an action for each item. These actions will tell Philter\n              how to process each item:\n              <UL>\n                <li>\n                  Philter will warn you about uncategorized items, but will not\n                  touch them.\n                </li>\n                <li>\n                  \"Mall sale\" will use the lowest mall price <i>at cleanup</i>,\n                  but never below the \"min price\".\n                </li>\n                <li>\"Send as gift\" actually uses Kmail, not the gift shop.</li>\n                <li>\n                  \"Crafting\" can use up other ingredients needed for the recipe,\n                  even if you marked them as \"Keep all\".\n                </li>\n                <li>\n                  \"Pulverize\" will send items to Smashbot if you can't use\n                  Pulverize or Malus, but only in aftercore.\n                </li>\n                <li>\n                  \"Reminder\" will show a reminder message during cleanup, but\n                  won't touch the item.\n                </li>\n              </UL>\n            </p>\n          }\n        >\n          <Button icon=\"help\" text=\"Help\" />\n        </Popover2>\n      </ButtonGroup>\n    ),\n    [disableReset, disableSave, onReset, onSave]\n  );\n\n  return (\n    <section\n      className={classNames('TableItemCleanup', className)}\n      {...restProps}\n    >\n      <header className=\"TableItemCleanup__HeaderMenu\">\n        {editorButtons}\n        <ControlGroup className=\"TableItemCleanup__ItemFilterControl\">\n          <div>Filter by:</div>\n          <InputGroup\n            onChange={useCallback(\n              (event: React.ChangeEvent<HTMLInputElement>) =>\n                setFilterText(event.target.value),\n              []\n            )}\n            placeholder=\"Enter item name...\"\n            value={filterText}\n          />\n          <div className=\"TableItemCleanup__ItemFilterBarHelperText\">\n            {filterText &&\n              `${finalItems.length} / ${items.length} match${\n                finalItems.length > 1 ? 'es' : ''\n              }`}\n          </div>\n        </ControlGroup>\n      </header>\n      <div className=\"TableItemCleanup__TableWrapper\">\n        <AutoSizer>\n          {({height: measuredHeight, width: measuredWidth}) => (\n            <Table\n              gridClassName=\"TableItemCleanup__Inner\"\n              headerClassName=\"TableItemCleanup__HeaderCell\"\n              headerHeight={30}\n              height={measuredHeight}\n              rowClassName={rowClassNameGetter}\n              rowCount={finalItems.length}\n              rowGetter={rowGetter}\n              rowHeight={60}\n              sort={updateSortState}\n              sortBy={sortBy}\n              sortDirection={sortDirection}\n              width={measuredWidth}\n            >\n              {columns}\n            </Table>\n          )}\n        </AutoSizer>\n      </div>\n      <footer className=\"TableItemCleanup__FooterMenu\">{editorButtons}</footer>\n    </section>\n  );\n});\n","import {H3, NonIdealState, Spinner, Tab, Tabs} from '@blueprintjs/core';\nimport {\n  CleanupRule,\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  ItemInfo,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetCleanupTableCategorized, fetchSaveCleanupRuleset} from '../api';\nimport {setErrorToast, setSavingToast, showInfoToast} from '../toaster';\nimport {cleanupActionToString, typeCheck} from '../util';\nimport './PanelCategorizedItems.css';\nimport {RuleChangeHandler, TableItemCleanup} from './TableItemCleanup';\n\nconst CLEANUP_TAB_TYPES = {\n  all: 0,\n  closet: 0,\n  craft: 0,\n  display: 0,\n  dispose: 0,\n  gift: 0,\n  inventory: 0,\n  keep: 0,\n  mall: 0,\n  pulverize: 0,\n  reminder: 0,\n  search: 0,\n  stash: 0,\n  untinker: 0,\n  use: 0,\n};\n\n/**\n * Note: Tab types do not match cleanup actions 1:1. For example, autosell\n * (AUTO) and discard (DISC) actions are shown together under \"dispose\".\n */\ntype CleanupTabType = keyof typeof CLEANUP_TAB_TYPES;\nconst isCleanupTabType = (tabId: unknown): tabId is CleanupTabType =>\n  typeof tabId === 'string' &&\n  Object.prototype.hasOwnProperty.call(CLEANUP_TAB_TYPES, tabId);\n\nconst categorizeItemsForTabs = (\n  items: readonly Readonly<ItemInfo>[],\n  cleanupRules: ReadonlyCleanupRuleset\n) =>\n  items.reduce(\n    (itemsForTabs, item) => {\n      const rule = cleanupRules[item.id];\n      if (rule) {\n        itemsForTabs.all.push(item);\n        switch (rule.action) {\n          case 'CLST':\n            itemsForTabs.closet.push(item);\n            break;\n          case 'MAKE':\n            itemsForTabs.craft.push(item);\n            break;\n          case 'AUTO':\n          case 'DISC':\n            itemsForTabs.dispose.push(item);\n            break;\n          case 'BREAK':\n          case 'USE':\n            itemsForTabs.use.push(item);\n            break;\n          case 'DISP':\n            itemsForTabs.display.push(item);\n            break;\n          case 'KEEP':\n            itemsForTabs.keep.push(item);\n            break;\n          case 'GIFT':\n            itemsForTabs.gift.push(item);\n            break;\n          case 'MALL':\n            itemsForTabs.mall.push(item);\n            break;\n          case 'PULV':\n            itemsForTabs.pulverize.push(item);\n            break;\n          case 'TODO':\n            itemsForTabs.reminder.push(item);\n            break;\n          case 'UNTN':\n            itemsForTabs.untinker.push(item);\n            break;\n          case 'CLAN':\n            itemsForTabs.stash.push(item);\n            break;\n        }\n      }\n      return itemsForTabs;\n    },\n    {\n      /** This includes only items that have a cleanup rule defined. */\n      all: [] as ItemInfo[],\n      closet: [] as ItemInfo[],\n      craft: [] as ItemInfo[],\n      display: [] as ItemInfo[],\n      dispose: [] as ItemInfo[],\n      gift: [] as ItemInfo[],\n      keep: [] as ItemInfo[],\n      mall: [] as ItemInfo[],\n      pulverize: [] as ItemInfo[],\n      reminder: [] as ItemInfo[],\n      stash: [] as ItemInfo[],\n      untinker: [] as ItemInfo[],\n      use: [] as ItemInfo[],\n    }\n  );\n\n/**\n * Panel for editing the player's Philter ruleset.\n */\nexport const PanelCategorizedItems = ({\n  cleanupRules,\n  onChange,\n}: {\n  /**\n   * Active cleanup ruleset being edited, or `undefined` if the base cleanup\n   * ruleset has not been loaded yet.\n   */\n  cleanupRules: ReadonlyCleanupRuleset | undefined;\n  /** Callback invoked when the active cleanup ruleset is changed */\n  onChange: (\n    newStateOrReducer: React.SetStateAction<ReadonlyCleanupRuleset | undefined>\n  ) => void;\n}): JSX.Element => {\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoading,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_CATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableCategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  // When the data is loaded for the first time, sync the active cleanup ruleset\n  // with the base cleanup ruleset\n  useEffect(() => {\n    if (data?.cleanupRules) {\n      onChange(prevCleanupRules => prevCleanupRules ?? data.cleanupRules);\n    }\n  }, [data?.cleanupRules, onChange]);\n\n  const hasChanges = useMemo(\n    () => Boolean(cleanupRules) && !dequal(cleanupRules, data?.cleanupRules),\n    [cleanupRules, data?.cleanupRules]\n  );\n\n  const handleReset = useCallback(\n    () => data?.cleanupRules && onChange(data.cleanupRules),\n    [data?.cleanupRules, onChange]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      if (!cleanupRules) {\n        throw new Error(\n          'Cannot save active ruleset because it has not been initialized yet'\n        );\n      }\n\n      const response = await fetchSaveCleanupRuleset(cleanupRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {...data, cleanupRules};\n    }, false)\n  );\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const handleRuleChange: RuleChangeHandler = useCallback(\n    (itemId, newRuleOrReducer) =>\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const prevRule: CleanupRule | undefined = prevCleanupRules[itemId];\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n\n        if (prevRule && prevRule.action !== newRule?.action) {\n          const itemName = data?.items.find(item => item.id === itemId)?.name;\n          if (itemName !== undefined) {\n            showInfoToast(\n              newRule\n                ? `Changed action for ${itemName} to \"${cleanupActionToString(\n                    newRule.action\n                  )}\"`\n                : `Removed action for ${itemName}`\n            );\n          }\n        }\n\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [data?.items, onChange]\n  );\n\n  const [tabId, setTabId] = useState<CleanupTabType>('all');\n\n  // Item categories are based on the active copy of the ruleset being edited,\n  // rather than the base copy. This allows the tabs to be updated in real time\n  // when the user edits the ruleset.\n  const itemsForTabs = useMemo(\n    () => categorizeItemsForTabs(data?.items ?? [], cleanupRules || {}),\n    [cleanupRules, data?.items]\n  );\n\n  const isTabAvailable = Object.prototype.hasOwnProperty.call(\n    itemsForTabs,\n    tabId\n  )\n    ? itemsForTabs[tabId as keyof typeof itemsForTabs].length > 0\n    : true;\n  const actualTabId = isTabAvailable ? tabId : 'all';\n\n  const makeItemTable = (items: ItemInfo[]) =>\n    cleanupRules &&\n    data && (\n      <TableItemCleanup\n        className=\"PanelCategorizedItems__Table\"\n        disableReset={!hasChanges}\n        disableSave={!hasChanges}\n        inventory={data.inventory}\n        items={items}\n        cleanupRules={cleanupRules}\n        onRuleChange={handleRuleChange}\n        onReset={handleReset}\n        onSave={handleSave}\n      />\n    );\n\n  return (\n    <>\n      <H3>Edit Cleanup Rules</H3>\n      {data ? (\n        <Tabs\n          className=\"PanelCategorizedItems__Tabs\"\n          onChange={tabId => isCleanupTabType(tabId) && setTabId(tabId)}\n          renderActiveTabPanelOnly\n          selectedTabId={actualTabId}\n        >\n          <Tab\n            id={typeCheck<CleanupTabType>('all')}\n            panel={makeItemTable(itemsForTabs.all)}\n            panelClassName=\"PanelCategorizedItems__TabItem\"\n            title=\"All\"\n          />\n          {itemsForTabs.keep.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('keep')}\n              panel={makeItemTable(itemsForTabs.keep)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Keep\"\n            />\n          )}\n          {itemsForTabs.mall.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('mall')}\n              panel={makeItemTable(itemsForTabs.mall)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Mall\"\n            />\n          )}\n          {itemsForTabs.pulverize.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('pulverize')}\n              panel={makeItemTable(itemsForTabs.pulverize)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Pulverize\"\n            />\n          )}\n          {itemsForTabs.use.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('use')}\n              panel={makeItemTable(itemsForTabs.use)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Use\"\n            />\n          )}\n          {itemsForTabs.closet.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('closet')}\n              panel={makeItemTable(itemsForTabs.closet)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Closet\"\n            />\n          )}\n          {itemsForTabs.stash.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('stash')}\n              panel={makeItemTable(itemsForTabs.stash)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Clan Stash\"\n            />\n          )}\n          {itemsForTabs.craft.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('craft')}\n              panel={makeItemTable(itemsForTabs.craft)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Crafting\"\n            />\n          )}\n          {itemsForTabs.untinker.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('untinker')}\n              panel={makeItemTable(itemsForTabs.untinker)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Untinkering\"\n            />\n          )}\n          {itemsForTabs.gift.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('gift')}\n              panel={makeItemTable(itemsForTabs.gift)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Gift\"\n            />\n          )}\n          {itemsForTabs.display.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('display')}\n              panel={makeItemTable(itemsForTabs.display)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Display\"\n            />\n          )}\n          {itemsForTabs.dispose.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('dispose')}\n              panel={makeItemTable(itemsForTabs.dispose)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Dispose\"\n            />\n          )}\n          {itemsForTabs.reminder.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('reminder')}\n              panel={makeItemTable(itemsForTabs.reminder)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Reminders\"\n            />\n          )}\n        </Tabs>\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Code, InputGroup} from '@blueprintjs/core';\nimport React, {memo} from 'react';\nimport './InputGroupAffixedFileName.css';\n\ninterface InputGroupAffixedFileNameProps\n  extends React.ComponentProps<typeof InputGroup> {\n  /** File name prefix, if any */\n  fileNamePrefix?: string;\n  /** File name suffix, if any */\n  fileNameSuffix?: string;\n}\n\n/**\n * `InputGroup` for a file name with predefined prefix and/or suffix.\n */\nexport const InputGroupAffixedFileName = memo(\n  // eslint-disable-next-line prefer-arrow-callback\n  function InputGroupAffixedFileName({\n    fileNamePrefix,\n    fileNameSuffix,\n    className = '',\n    ...restProps\n  }: InputGroupAffixedFileNameProps) {\n    return (\n      <InputGroup\n        className={`InputGroupAffixedFileName ${className}`}\n        leftElement={\n          fileNamePrefix ? (\n            <Code className=\"InputGroupAffixedFileName__Prefix\">\n              {fileNamePrefix}\n            </Code>\n          ) : undefined\n        }\n        rightElement={\n          fileNameSuffix ? (\n            <Code className=\"InputGroupAffixedFileName__Suffix\">\n              {fileNameSuffix}\n            </Code>\n          ) : undefined\n        }\n        {...restProps}\n      />\n    );\n  }\n);\n","import {\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Classes,\n  Code,\n  Dialog,\n  Divider,\n  FormGroup,\n  H3,\n  InputGroup,\n  Radio,\n  RadioGroup,\n} from '@blueprintjs/core';\nimport {CONFIG_ROUTE, PhilterConfig} from '@philter/common';\nimport classNames from 'classnames';\nimport {dequal} from 'dequal/lite';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetPhilterConfig, fetchSavePhilterConfig} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {MAX_MALL_PRICE, ZWSP} from '../util';\nimport {InputGroupAffixedFileName} from './InputGroupAffixedFileName';\nimport './PanelConfig.css';\n\nconst CLEANUP_RULESET_PREFIX = 'OCDdata_';\nconst STOCKING_RULESET_PREFIX = 'OCDstock_';\nconst TXT_SUFFIX = '.txt';\n\ninterface ChangedFileEntry {\n  /** Label for this entry, shown to the user. */\n  label: string;\n  newName: string;\n  oldName: string;\n}\n\n/**\n * A `<Dialog>` that asks whether to copy over existing data or start fresh when\n * the user changes the name of the ruleset file(s).\n * To properly animate closing transitions, this must be rendered even if the\n * dialog is closed.\n */\n// eslint-disable-next-line prefer-arrow-callback\nconst DialogAskCopyOnSave = memo(function DialogAskCopyOnSave({\n  changedFiles = [],\n  isOpen,\n  onCancel,\n  onSaveWithCopy,\n  onSaveWithoutCopy,\n}: {\n  /** Array of data files changed. */\n  changedFiles?: readonly Readonly<ChangedFileEntry>[];\n  isOpen?: boolean;\n  onCancel?: () => void;\n  onSaveWithCopy?: () => void;\n  onSaveWithoutCopy?: () => void;\n}) {\n  return (\n    <Dialog\n      canEscapeKeyClose\n      canOutsideClickClose\n      icon=\"warning-sign\"\n      isOpen={isOpen}\n      onClose={onCancel}\n      title={`Changing data file name${changedFiles.length > 1 ? 's' : ''}`}\n    >\n      <div className={Classes.DIALOG_BODY}>\n        You are about the change your data file\n        {changedFiles.length > 1 ? \"s' names\" : \"'s name\"}:\n        <ul>\n          {changedFiles.map((entry, index) => (\n            <li key={index}>\n              {entry.label}: <Code>{entry.oldName}</Code> &rArr;{' '}\n              <Code>{entry.newName}</Code>\n            </li>\n          ))}\n        </ul>\n        Do you want to copy the contents of your previous data file\n        {changedFiles.length > 1 && 's'}?\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button\n            icon=\"duplicate\"\n            text=\"Copy contents\"\n            onClick={onSaveWithCopy}\n          />\n          <Button\n            icon=\"exchange\"\n            text={`Change file name${changedFiles.length > 1 ? 's' : ''} only`}\n            onClick={onSaveWithoutCopy}\n          />\n          <Button intent=\"danger\" text=\"Cancel\" onClick={onCancel} />\n        </div>\n      </div>\n    </Dialog>\n  );\n});\n\n/**\n * Helper function that checks if first value is identical to any of the values\n * in the given array.\n */\nconst isOneOf = <T extends unknown>(\n  value: unknown,\n  compareWith: readonly T[]\n): value is T => compareWith.includes(value as T);\n\nexport const PanelConfig = (): JSX.Element => {\n  const {\n    data: baseConfig,\n    error: loadingError,\n    mutate,\n  } = useSWR(CONFIG_ROUTE, async () => (await fetchGetPhilterConfig()).result);\n\n  const [config, setConfig] = useState<PhilterConfig | null>(null);\n  // When the data is loaded for the first time, synchronize config with\n  // the server-sent config\n  useEffect(() => {\n    if (baseConfig && !config) {\n      setConfig(baseConfig);\n    }\n  }, [baseConfig, config]);\n\n  // Saving config is a complicated process that can open a popup dialog asking\n  // for the user's confirmation\n  // This is why we jump through loops and hoops...\n\n  const [dialogProps, setDialogProps] = useState<\n    React.ComponentProps<typeof DialogAskCopyOnSave>\n  >({});\n  const closeDialog = useCallback(() => setDialogProps({}), []);\n\n  const {\n    loading: isSaving,\n    execute: saveConfig,\n    error: savingError,\n  } = useAsyncCallback(\n    async (config: PhilterConfig, shouldCopyDataFiles?: boolean) => {\n      const response = await fetchSavePhilterConfig(\n        config,\n        shouldCopyDataFiles\n      );\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      mutate(config);\n    }\n  );\n\n  /** Performs some checks before saving the config. */\n  const saveConfigWithCheck = useCallback(\n    async (shouldCopyDataFiles?: boolean) => {\n      // These are logical errors and should never happen.\n      // If they do, we don't want to catch them\n      if (!config) {\n        throw new Error('Cannot save empty config');\n      }\n      if (!baseConfig) {\n        throw new Error('Cannot overwrite an empty config object');\n      }\n\n      const changedFiles: ChangedFileEntry[] = [];\n      if (config.dataFileName !== baseConfig.dataFileName) {\n        changedFiles.push({\n          label: 'Ruleset file',\n          oldName:\n            CLEANUP_RULESET_PREFIX + baseConfig.dataFileName + TXT_SUFFIX,\n          newName: CLEANUP_RULESET_PREFIX + config.dataFileName + TXT_SUFFIX,\n        });\n      }\n      if (config.stockFileName !== baseConfig.stockFileName) {\n        changedFiles.push({\n          label: 'Stock file',\n          oldName:\n            STOCKING_RULESET_PREFIX + baseConfig.stockFileName + TXT_SUFFIX,\n          newName: STOCKING_RULESET_PREFIX + config.stockFileName + TXT_SUFFIX,\n        });\n      }\n\n      // If shouldCopyDataFiles is not explicitly given, display a dialog asking\n      // the user what to do\n      if (changedFiles.length && shouldCopyDataFiles === undefined) {\n        setDialogProps({isOpen: true, changedFiles});\n        return;\n      }\n\n      await saveConfig(config, shouldCopyDataFiles);\n    },\n    [baseConfig, config, saveConfig]\n  );\n\n  const hasChanges = !dequal(config, baseConfig);\n  const setConfigSafe = useCallback(\n    (configOrReducer: React.SetStateAction<PhilterConfig>) =>\n      setConfig(\n        typeof configOrReducer === 'function'\n          ? config => config && configOrReducer(config)\n          : configOrReducer\n      ),\n    []\n  );\n\n  const isDisabled = !baseConfig || !config || isSaving;\n\n  useEffect(\n    () => setErrorToast('loadingError', loadingError, 'Cannot load config'),\n    [loadingError]\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save config'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving config...'),\n    [isSaving]\n  );\n\n  const isMallMultiInputDisabled = isDisabled || !config?.canUseMallMulti;\n  return (\n    <>\n      <DialogAskCopyOnSave\n        onCancel={() => closeDialog()}\n        onSaveWithCopy={() => {\n          closeDialog();\n          saveConfigWithCheck(true);\n        }}\n        onSaveWithoutCopy={() => {\n          closeDialog();\n          saveConfigWithCheck(false);\n        }}\n        {...dialogProps}\n      />\n      <H3>Configure Philter</H3>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">General settings</legend>\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Empty closet first before cleanup:\"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              const emptyClosetMode = Number(value);\n              if (isOneOf(emptyClosetMode, [0, -1] as const)) {\n                setConfigSafe(config => ({...config, emptyClosetMode}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.emptyClosetMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Never\"\n            value={0}\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Before Emptying Hangk's (recommended)\"\n            value={-1}\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Mall pricing: \"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              if (isOneOf(value, ['auto', 'max'] as const)) {\n                setConfigSafe(config => ({...config, mallPricingMode: value}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.mallPricingMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Automatic\"\n            value=\"auto\"\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label={`${MAX_MALL_PRICE.toLocaleString()} meat (ignores \"min price\")`}\n            value=\"max\"\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <Checkbox\n          checked={Boolean(config?.simulateOnly)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, simulateOnly: checked}))\n          }\n        >\n          Simulate only <small>(no items will be cleaned up)</small>\n        </Checkbox>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Mall multi setup</legend>\n        <Checkbox\n          checked={Boolean(config?.canUseMallMulti)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, canUseMallMulti: checked}))\n          }\n        >\n          Use mall multi\n        </Checkbox>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isMallMultiInputDisabled}\n          inline\n          intent={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'warning'\n              : undefined\n          }\n          label=\"Mall multi name:\"\n          helperText={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'No multi account'\n              : ZWSP\n          }\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isMallMultiInputDisabled}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({...config, mallMultiName: value}))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter player name'}\n            value={config?.mallMultiName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled || !config?.canUseMallMulti}\n          inline\n          label=\"Mall multi Kmail text:\"\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isDisabled || !config?.canUseMallMulti}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({\n                ...config,\n                mallMultiKmailMessage: value,\n              }))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter Kmail message'}\n            value={config?.mallMultiKmailMessage || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Data files</legend>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Ruleset file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={CLEANUP_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, dataFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.dataFileName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Stock file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={STOCKING_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, stockFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.stockFileName || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <ButtonGroup>\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"floppy-disk\"\n          onClick={useCallback(\n            () => saveConfigWithCheck(),\n            [saveConfigWithCheck]\n          )}\n          text=\"Save\"\n        />\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"reset\"\n          onClick={useCallback(\n            () => baseConfig && setConfig(baseConfig),\n            [baseConfig]\n          )}\n          text=\"Discard changes\"\n        />\n      </ButtonGroup>\n    </>\n  );\n};\n","/**\n * @file Defines requests and responses for Philter settings.\n */\nexport const CONFIG_ROUTE = '/config';\n//# sourceMappingURL=config.js.map","import {\n  Callout,\n  Colors,\n  H3,\n  HTMLTable,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {STATISTICS_ROUTE} from '@philter/common';\nimport React, {useMemo} from 'react';\nimport useSWR from 'swr';\nimport {fetchGetStatistics} from '../api';\nimport './PanelInformation.css';\n\nconst BULLET = <span className=\"PanelInformation__Bullet\">&#8943;</span>;\n\n/**\n * Panel that acts as the \"home page\", and displays general information about\n * the player's cleanup rules.\n */\nexport const PanelInformation = (): JSX.Element => {\n  const {\n    data,\n    isValidating: isLoading,\n    error: loadingError,\n  } = useSWR(STATISTICS_ROUTE, async () => (await fetchGetStatistics()).result);\n\n  const categorizedCount = useMemo(\n    () =>\n      data\n        ? Object.values(data.categorizedItemCounts).reduce(\n            (acc, sum) => acc + sum\n          )\n        : 0,\n    [data]\n  );\n\n  return (\n    <div>\n      <H3>\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society/Philter\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Philter Manager\n        </a>\n      </H3>\n      <p>\n        Brought to you by{' '}\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Loathing Associates Scripting Society\n        </a>\n      </p>\n      <Callout intent=\"warning\" title=\"Manager v2 is in alpha\">\n        Using this <i>may</i> destroy your Philter configuration. Use at your\n        own risk.\n        <br />\n        The{' '}\n        <a href=\"/relay_Philter_Manager_classic.ash?relay=true\">\n          classic UI\n        </a>{' '}\n        is still available.\n      </Callout>\n      {data ? (\n        categorizedCount > 0 ? (\n          <HTMLTable\n            bordered\n            className=\"PanelInformation__VerticalTable\"\n            condensed\n          >\n            <tbody>\n              <tr>\n                <th\n                  style={\n                    data.uncategorizedItemCount > 0\n                      ? {color: Colors.ORANGE1}\n                      : undefined\n                  }\n                >\n                  Uncategorized (in inventory)\n                </th>\n                <td\n                  style={\n                    data.uncategorizedItemCount > 0\n                      ? {color: Colors.ORANGE1}\n                      : undefined\n                  }\n                >\n                  {data.uncategorizedItemCount}\n                </td>\n              </tr>\n              <tr>\n                <th>Items in Ruleset</th>\n                <td>{categorizedCount}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Keep All</th>\n                <td>{data.categorizedItemCounts.KEEP}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Mallsell</th>\n                <td>{data.categorizedItemCounts.MALL}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Autosell/Discard</th>\n                <td>\n                  {data.categorizedItemCounts.AUTO +\n                    data.categorizedItemCounts.DISC}\n                </td>\n              </tr>\n              <tr>\n                <th>{BULLET} Pulverize</th>\n                <td>{data.categorizedItemCounts.PULV}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Use or break</th>\n                <td>\n                  {data.categorizedItemCounts.BREAK +\n                    data.categorizedItemCounts.USE}\n                </td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in closet</th>\n                <td>{data.categorizedItemCounts.CLST}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in clan stash</th>\n                <td>{data.categorizedItemCounts.CLAN}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Crafting</th>\n                <td>{data.categorizedItemCounts.MAKE}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Untinker</th>\n                <td>{data.categorizedItemCounts.UNTN}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Send as gift</th>\n                <td>{data.categorizedItemCounts.GIFT}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in display case</th>\n                <td>{data.categorizedItemCounts.DISP}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Remind me later</th>\n                <td>{data.categorizedItemCounts.TODO}</td>\n              </tr>\n            </tbody>\n          </HTMLTable>\n        ) : (\n          <NonIdealState\n            icon=\"help\"\n            description='If this is your first time using Philter, you can create cleanup rules for your items in the \"Add Items\" tab.'\n            title=\"Your Philter ruleset is empty or missing.\"\n          />\n        )\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @file Endpoint for general statistics about Philter.\n */\nexport const STATISTICS_ROUTE = '/statistics';\n//# sourceMappingURL=statistics.js.map","import {\n  Button,\n  ButtonGroup,\n  FormGroup,\n  H3,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {\n  CleanupRuleset,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {\n  fetchGetCleanupTableUncategorized,\n  fetchSaveCleanupRuleset,\n} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport './PanelUncategorizedItems.css';\nimport {TableItemCleanup} from './TableItemCleanup';\n\nexport const PanelUncategorizedItems = ({\n  cleanupRules,\n  onChange,\n}: {\n  /**\n   * Active cleanup ruleset being edited, or `undefined` if the base cleanup\n   * ruleset has not been loaded yet.\n   */\n  cleanupRules: ReadonlyCleanupRuleset | undefined;\n  /** Callback invoked when the active cleanup ruleset is changed */\n  onChange: (\n    newStateOrReducer: React.SetStateAction<ReadonlyCleanupRuleset | undefined>\n  ) => void;\n}): JSX.Element => {\n  // Major assumptions:\n  //\n  // - data.items contains _only_ items that are uncategorized, i.e. the server\n  //   performs the filtering for us.\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoadingData,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableUncategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  // When the data is loaded for the first time, sync the active cleanup ruleset\n  // with the base cleanup ruleset\n  useEffect(() => {\n    if (data?.cleanupRules) {\n      onChange(prevCleanupRules => prevCleanupRules ?? data.cleanupRules);\n    }\n  }, [data?.cleanupRules, onChange]);\n\n  const hasChanges = useMemo(\n    () => Boolean(cleanupRules) && !dequal(cleanupRules, data?.cleanupRules),\n    [cleanupRules, data?.cleanupRules]\n  );\n\n  const handleReset = useCallback(\n    () => data?.cleanupRules && onChange(data.cleanupRules),\n    [data?.cleanupRules, onChange]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      if (!cleanupRules) {\n        throw new Error(\n          'Cannot save active ruleset because it has not been initialized yet'\n        );\n      }\n\n      const response = await fetchSaveCleanupRuleset(cleanupRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {\n        ...data,\n        items: data.items.filter(item => !(item.id in cleanupRules)),\n        cleanupRules,\n      };\n    }, false)\n  );\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const setAllItemsToMall = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          if (item.canMall) {\n            cleanupRules[item.id] = {action: 'MALL', minPrice: 0};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n  const setAllItemsToCloset = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          if (item.canCloset) {\n            cleanupRules[item.id] = {action: 'CLST'};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n  const setAllItemsToKeep = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          cleanupRules[item.id] = {action: 'KEEP'};\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n\n  const handleCleanupRulesetChange = useCallback(\n    (newRulesOrReducer: React.SetStateAction<CleanupRuleset>) =>\n      onChange(prevCleanupRules =>\n        prevCleanupRules\n          ? typeof newRulesOrReducer === 'function'\n            ? newRulesOrReducer(prevCleanupRules)\n            : newRulesOrReducer\n          : prevCleanupRules\n      ),\n    [onChange]\n  );\n\n  return (\n    <>\n      <H3>Uncategorized Items in Your Inventory</H3>\n      {cleanupRules && data ? (\n        data.items.length > 0 ? (\n          <>\n            <FormGroup inline label=\"Categorize all items as...\">\n              <ButtonGroup>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canMall && cleanupRules[item.id]?.action !== 'MALL'\n                    )\n                  }\n                  onClick={setAllItemsToMall}\n                >\n                  Mallsell\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canCloset &&\n                        cleanupRules[item.id]?.action !== 'CLST'\n                    )\n                  }\n                  onClick={setAllItemsToCloset}\n                >\n                  Closet\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item => cleanupRules[item.id]?.action !== 'KEEP'\n                    )\n                  }\n                  onClick={setAllItemsToKeep}\n                >\n                  Keep all\n                </Button>\n              </ButtonGroup>\n            </FormGroup>\n            <TableItemCleanup\n              className=\"PanelUncategorizedItems__Table\"\n              disableReset={!hasChanges}\n              disableSave={!hasChanges}\n              inventory={data.inventory}\n              items={data.items}\n              cleanupRules={cleanupRules}\n              onChange={handleCleanupRulesetChange}\n              onReset={handleReset}\n              onSave={handleSave}\n            />\n          </>\n        ) : (\n          <NonIdealState\n            icon={\n              <img\n                alt=\"Nothing to do\"\n                src=\"/images/adventureimages/kg_accountant.gif\"\n              />\n            }\n            title=\"Your entire inventory has been categorized\"\n            description='\"Nothing to see here, please move along.\"'\n          />\n        )\n      ) : isLoadingData ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Tab, Tabs} from '@blueprintjs/core';\nimport {CleanupRuleset} from '@philter/common';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {PanelCategorizedItems} from './components/PanelCategorizedItems';\nimport {PanelConfig} from './components/PanelConfig';\nimport {PanelInformation} from './components/PanelInformation';\nimport {PanelUncategorizedItems} from './components/PanelUncategorizedItems';\nimport {typeCheck} from './util';\n\nconst MainTabs = Object.freeze({\n  categorized: 0,\n  config: 0,\n  information: 0,\n  uncategorized: 0,\n});\ntype MainTabType = keyof typeof MainTabs;\nconst DEFAULT_TAB = 'information';\n\n/**\n * Ensures that the given tab ID is a valid tab ID.\n * @param tabId Tab ID to check\n * @return Returns the original value of `tabId` if it is a valid tab ID.\n *    Otherwise, returns an appropriate default tab ID as fallback.\n */\nconst ensureValidTabType = (tabId: number | string): MainTabType =>\n  Object.prototype.hasOwnProperty.call(MainTabs, tabId)\n    ? (tabId as MainTabType)\n    : DEFAULT_TAB;\n\nexport const App = (): JSX.Element => {\n  const [tabId, setTabId] = useState<MainTabType>(DEFAULT_TAB);\n\n  // Global edit state persisted across categorized and uncategorized item tabs\n  const [activeCleanupRules, setActiveCleanupRules] = useState<\n    CleanupRuleset | undefined\n  >();\n\n  return (\n    <div className=\"App\">\n      <Tabs\n        className=\"App__Tabs\"\n        id=\"mainTabs\"\n        onChange={tabId => setTabId(ensureValidTabType(tabId))}\n        renderActiveTabPanelOnly\n        selectedTabId={ensureValidTabType(tabId)}\n      >\n        <Tab\n          id={typeCheck<MainTabType>('information')}\n          panel={<PanelInformation />}\n          panelClassName=\"App__TabItem\"\n          title=\"Information\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('uncategorized')}\n          panel={\n            <PanelUncategorizedItems\n              cleanupRules={activeCleanupRules}\n              onChange={setActiveCleanupRules}\n            />\n          }\n          panelClassName=\"App__TabItem\"\n          title=\"Add Items\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('categorized')}\n          panel={\n            <PanelCategorizedItems\n              cleanupRules={activeCleanupRules}\n              onChange={setActiveCleanupRules}\n            />\n          }\n          panelClassName=\"App__TabItem\"\n          title=\"Edit Rules\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('config')}\n          panel={<PanelConfig />}\n          panelClassName=\"App__TabItem\"\n          title=\"Configuration\"\n        />\n      </Tabs>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"names":["relList","document","createElement","supports","link","querySelectorAll","MutationObserver","mutations","mutation","type","node","addedNodes","tagName","rel","observe","childList","subtree","ep","fetchOpts","script","integrity","referrerpolicy","referrerPolicy","crossorigin","credentials","getFetchOpts","href","p","_cleanupActions","Object","freeze","AUTO","BREAK","CLAN","CLST","DISC","DISP","GIFT","KEEP","MAKE","MALL","PULV","TODO","UNTN","USE","Error","constructor","message","code","response","ApiError","prototype","name","fetchFromApi","async","path","method","body","preparedRequest","request","serializedRequest","key","keys","value","serializedValue","JSON","stringify","prepareRequestForSerialization","__spreadValues","fetchResponse","fetch","URLSearchParams","ok","text","e","error","statusText","status","json","fetchSaveCleanupRuleset","cleanupRules","toaster","Toaster","create","maxToasts","setErrorToast","errorMessage","show","icon","intent","String","dismiss","setSavingToast","isSaving","shouldWarnOnPulverize","item","isTradable","NumericInputLite","_a","className","fill","small","_b","props","classNames","Classes.INPUT","Classes.SMALL","Classes.FILL","dir","isCleanupActionOrUnknown","hasOwnProperty","call","isCleanupAction","SelectCleanupAction","memo","_c","onChange","_d","restProps","Classes.HTML_SELECT","target","canMall","canBreak","canAutosell","canDiscard","style","color","Colors","ORANGE2","canGift","canStash","canPulverize","canMake","canUntinker","canUse","canCloset","canDisplay","CleanupRulePicker","rule","handleActionChange","useCallback","action","oldRule","__spreadProps","recipent","shouldUseCreatableOnly","targetItem","minPrice","helperText","Intent","WARNING","FormGroup","contentClassName","inline","DANGER","label","Classes.INTENT_DANGER","placeholder","Checkbox","checked","currentTarget","max","min","Number","event","isInteger","Math","SortableColumnKey","SortableColumnKey2","assertInvalidSortableColumnKey","useSortState","sortState","setSortState","useState","sortBy","sortDirection","SortDirection","ASC","updateSortState","activatedColumnKey","prevState","DESC","sortableHeaderRenderer","dataKey","disableSort","labelNode","iconType","iconIntent","iconColor","ITEM_NAME","asc","desc","CLOSET_AMOUNT","STORAGE_AMOUNT","DISPLAY_CASE_AMOUNT","MALL_PRICE","getSortingIconNames","GRAY4","Icon","MinMallPriceTag","Classes.TAG","Classes.MINIMAL","Classes.INTENT_PRIMARY","title","CellItemName","inventory","Classes.BUTTON","onClick","itemDescriptionPopup","descid","open","focus","tabIndex","alt","src","image","dangerouslySetInnerHTML","__html","id","CellMallPrice","mallPrice","toLocaleString","replace","isMallPriceAtMinimum","CellKeepAmount","onRuleChange","disabled","rule2","keepAmount","CellItemAction","newRuleOrReducer","TableItemCleanup","_e","disableReset","disableSave","items","onReset","onSave","_f","defaultRuleChangeHandler","itemId","newRule","prevCleanupRules","_removed","__restKey","handleRuleChange","filterText","setFilterText","finalItems","useMemo","finalItems2","filterTextLower","trim","toLowerCase","filter","includes","sort","itemA","itemB","localeCompare","closet","storage","displayCase","reverse","rowGetter","index","index2","rowClassNameGetter","makeColumn","getData","renderCell","restProps2","Column","cellDataGetter","rowData","cellRenderer","className2","flexShrink","makeSortableColumn","headerRenderer","columns","flexGrow","width","editorButtons","ButtonGroup","Button","Popover2","popoverClassName","Popover2Classes.POPOVER2_CONTENT_SIZING","content","UL","ControlGroup","InputGroup","length","AutoSizer","height","measuredHeight","measuredWidth","Table","gridClassName","headerClassName","headerHeight","rowClassName","rowCount","rowHeight","CLEANUP_TAB_TYPES","all","craft","display","dispose","gift","keep","mall","pulverize","reminder","search","stash","untinker","use","PanelCategorizedItems","data","loadingError","isValidating","isLoading","mutate","useSWR","result","hasChanges","Boolean","dequal","handleReset","savingError","execute","handleSave","loading","useAsyncCallback","data2","success","prevRule","itemName","find","cleanupActionToString","tabId","setTabId","itemsForTabs","reduce","push","actualTabId","makeItemTable","H3","Tabs","isCleanupTabType","tabId2","renderActiveTabPanelOnly","selectedTabId","Tab","panel","panelClassName","Spinner","NonIdealState","description","InputGroupAffixedFileName","_g","fileNamePrefix","fileNameSuffix","_h","leftElement","Code","rightElement","DialogAskCopyOnSave","changedFiles","isOpen","onCancel","onSaveWithCopy","onSaveWithoutCopy","Dialog","canEscapeKeyClose","canOutsideClickClose","onClose","Classes.DIALOG_BODY","map","entry","oldName","newName","Classes.DIALOG_FOOTER","Classes.DIALOG_FOOTER_ACTIONS","isOneOf","compareWith","PanelConfig","baseConfig","config","setConfig","dialogProps","setDialogProps","closeDialog","saveConfig","config2","shouldCopyDataFiles","fetchSavePhilterConfig","saveConfigWithCheck","dataFileName","stockFileName","setConfigSafe","configOrReducer","isDisabled","isMallMultiInputDisabled","canUseMallMulti","RadioGroup","emptyClosetMode","selectedValue","Radio","Classes.SKELETON","Divider","mallPricingMode","simulateOnly","mallMultiName","mallMultiKmailMessage","BULLET","PanelInformation","categorizedCount","values","categorizedItemCounts","acc","sum","Callout","HTMLTable","bordered","condensed","uncategorizedItemCount","ORANGE1","PanelUncategorizedItems","isLoadingData","setAllItemsToMall","cleanupRules2","setAllItemsToCloset","setAllItemsToKeep","handleCleanupRulesetChange","newRulesOrReducer","some","MainTabs","categorized","information","uncategorized","ensureValidTabType","App","activeCleanupRules","setActiveCleanupRules","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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"}