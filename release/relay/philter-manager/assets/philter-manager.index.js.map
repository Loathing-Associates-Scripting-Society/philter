{"version":3,"file":"philter-manager.index.js","sources":["../../../../packages/common/build/src/api/cleanup-table.js","../../../../packages/common/build/src/data/cleanup-rule.js","../../../../packages/manager/src/api.ts","../../../../packages/common/build/src/api/base.js","../../../../packages/common/build/src/api/ruleset.js","../../../../packages/manager/src/toaster.tsx","../../../../packages/manager/src/util.ts","../../../../packages/manager/src/components/NumericInputLite.tsx","../../../../packages/manager/src/components/SelectCleanupAction.tsx","../../../../packages/manager/src/components/CleanupRulePicker.tsx","../../../../packages/manager/src/components/TableItemCleanup.tsx","../../../../packages/manager/src/components/PanelCategorizedItems.tsx","../../../../packages/manager/src/components/InputGroupAffixedFileName.tsx","../../../../packages/manager/src/components/PanelConfig.tsx","../../../../packages/common/build/src/api/config.js","../../../../packages/manager/src/components/PanelInformation.tsx","../../../../packages/common/build/src/api/statistics.js","../../../../packages/manager/src/components/PanelUncategorizedItems.tsx","../../../../packages/manager/src/App.tsx","../../../../packages/manager/src/index.tsx"],"sourcesContent":["/**\n * @file Defines routes for Cleanup Tables.\n */\nexport const CLEANUP_TABLES_CATEGORIZED_ROUTE = '/cleanup-tables/categorized';\nexport const CLEANUP_TABLES_UNCATEGORIZED_ROUTE = '/cleanup-tables/uncategorized';\n//# sourceMappingURL=cleanup-table.js.map","/**\n * Object whose keys are string values that make up the `CleanupAction` type.\n * Also used to check at runtime if a string belongs to `CleanupAction`.\n * The values are unused; they can be anything.\n */\nconst _cleanupActions = Object.freeze({\n    AUTO: 0,\n    BREAK: 0,\n    CLAN: 0,\n    CLST: 0,\n    DISC: 0,\n    DISP: 0,\n    GIFT: 0,\n    KEEP: 0,\n    MAKE: 0,\n    MALL: 0,\n    PULV: 0,\n    TODO: 0,\n    UNTN: 0,\n    USE: 0,\n});\n/**\n * Checks if the given value is a valid `CleanupAction` type.\n */\nexport const isCleanupAction = (value) => typeof value === 'string' &&\n    Object.prototype.hasOwnProperty.call(_cleanupActions, value);\n//# sourceMappingURL=cleanup-rule.js.map","/**\n * @file Methods for communicating with the relay script\n */\n\nimport {\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  CONFIG_ROUTE,\n  ErrorResponseBase,\n  INVENTORY_ROUTE,\n  PhilterConfig,\n  prepareRequestForSerialization,\n  ReadonlyCleanupRuleset,\n  RELAY_SCRIPT_FILE,\n  Request,\n  RequestMethodFor,\n  Response,\n  Routes,\n  RULESET_ROUTE,\n  STATISTICS_ROUTE,\n} from '@philter/common';\n\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\n * API error class. Thrown when the API returns an error response.\n */\nexport class ApiError extends Error {\n  /** Error code. This does _not_ map 1:1 to HTTP error codes. */\n  readonly code: number;\n  /** Error response object returned by the API. */\n  readonly response: unknown;\n\n  constructor(message: string, code: number, response: unknown) {\n    super(message);\n    this.code = code;\n    this.response = response;\n  }\n}\nApiError.prototype.name = 'ApiError';\n\n/**\n * Fetches data using routes and methods defined in `@philter/common`.\n * @param path Request route\n * @param method Request method\n * @return Asynchronous fetcher callback\n * @throws {ApiError}\n */\nconst fetchFromApi = async <\n  Path extends keyof Routes,\n  Method extends RequestMethodFor<Path>\n>(\n  path: Path,\n  method: Method,\n  body: Readonly<Omit<Request<Path, Method>, 'path' | 'method'>>\n) => {\n  const preparedRequest = prepareRequestForSerialization({\n    path,\n    method,\n    ...body,\n  });\n\n  // KoLmafia requires the `relay=true` parameter in order to execute JavaScript\n  // -based relay scripts.\n  const fetchResponse = await fetch(`/${RELAY_SCRIPT_FILE}?relay=true`, {\n    body: new URLSearchParams(preparedRequest),\n    method: 'POST',\n  });\n  if (!fetchResponse.ok) {\n    let text;\n    try {\n      text = await fetchResponse.text();\n    } catch (e) {\n      // Crude approach, but text() only fails under rare circumstances...\n      console.error(e);\n    }\n    throw new ApiError(fetchResponse.statusText, fetchResponse.status, text);\n  }\n\n  let response;\n  try {\n    response = (await fetchResponse.json()) as\n      | Response<Path, Method>\n      | ErrorResponseBase;\n  } catch (error) {\n    throw new ApiError(\n      `Invalid JSON returned from server (${error})\\nResponse: ${response}`,\n      500,\n      response\n    );\n  }\n\n  if ('error' in response) {\n    throw new ApiError(\n      response.error.message,\n      response.error.code,\n      response.error.message\n    );\n  }\n  return response;\n};\n\nexport const fetchGetCleanupTableCategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_CATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchGetCleanupTableUncategorized = () =>\n  fetchFromApi(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, 'get', {});\n\nexport const fetchSaveCleanupRuleset = (cleanupRules: ReadonlyCleanupRuleset) =>\n  fetchFromApi(RULESET_ROUTE, 'post', {cleanupRules});\n\nexport const fetchInventoryState = () =>\n  fetchFromApi(INVENTORY_ROUTE, 'get', {});\n\nexport const fetchGetPhilterConfig = () =>\n  fetchFromApi(CONFIG_ROUTE, 'get', {});\n\nexport const fetchSavePhilterConfig = (\n  config: Readonly<PhilterConfig>,\n  shouldCopyDataFiles?: boolean\n) => fetchFromApi(CONFIG_ROUTE, 'post', {config, shouldCopyDataFiles});\n\nexport const fetchGetStatistics = () =>\n  fetchFromApi(STATISTICS_ROUTE, 'get', {});\n","/**\n * @file Defines base types for API requests and responses.\n */\nfunction isValidRequestMethod(value) {\n    return value === 'get' || value === 'patch' || value === 'post';\n}\nfunction isRequestBasePropertyName(value) {\n    return value === 'method' || value === 'path';\n}\n/**\n * Converts a `RequestBase` object to a flat object suitable for serialization.\n *\n * A client should serialize the returned value using `URLSearchParams()` before\n * sending it over the network.\n */\nexport function prepareRequestForSerialization(request) {\n    const serializedRequest = {};\n    for (const key of Object.keys(request)) {\n        // Known keys should not be serialized, but passed as-is.\n        if (isRequestBasePropertyName(key)) {\n            serializedRequest[key] = request[key];\n        }\n        else {\n            // All other keys should be serialized, even if their values are strings.\n            // JSON.stringify() can return undefined if the input is undefined.\n            // TypeScript currently doesn't check this, so we must do so manually.\n            const serializedValue = JSON.stringify(request[key]);\n            // Skip undefined fields\n            if (serializedValue !== undefined) {\n                serializedRequest[key] = serializedValue;\n            }\n        }\n    }\n    return serializedRequest;\n}\n/**\n * Converts a flat object to a `RequestBase`.\n *\n * A server should call this on the return value of `formFields()`\n * (analogous to `request.body` in Express.js).\n * @param wrappedRequest Wrapped request object\n * @throws {Error} If any `RequestBase` properties are missing or invalid\n */\nexport function unwrapDeserializedRequest(wrappedRequest) {\n    // Cast to Partial<> so that TypeScript type-checks our property access\n    const uncheckedRequest = wrappedRequest;\n    if (typeof uncheckedRequest.method !== 'string') {\n        throw new Error('Missing URL/form parameter: method');\n    }\n    else if (!isValidRequestMethod(uncheckedRequest.method)) {\n        throw new Error(`Invalid URL/form parameter: method=${uncheckedRequest.method}`);\n    }\n    if (typeof uncheckedRequest.path !== 'string') {\n        throw new Error('Missing URL/form parameter: path');\n    }\n    const request = {};\n    for (const key of Object.keys(wrappedRequest)) {\n        // Known keys are passed as-is.\n        // All other keys are deserialized.\n        request[key] = isRequestBasePropertyName(key)\n            ? wrappedRequest[key]\n            : JSON.parse(wrappedRequest[key]);\n    }\n    return request;\n}\n//# sourceMappingURL=base.js.map","/**\n * @file Defines requests and responses for rulesets.\n */\nexport const RULESET_ROUTE = '/ruleset';\n//# sourceMappingURL=ruleset.js.map","/**\n * @file Provides methods for toast-based notifications.\n */\n\nimport {Toaster} from '@blueprintjs/core';\nimport React from 'react';\nimport {ApiError} from './api';\n\n/** Globally shared `<Toaster>` instance for displaying notifications. */\nexport const toaster = Toaster.create({maxToasts: 1});\n\n/**\n * Render `error` as a toast message.\n * @param error Error object. If this is a falsy value, the toast message will\n *    be removed.\n * @param errorMessage Message to show\n * @param key Used to uniquely identify the toast message\n */\nexport const setErrorToast = (\n  key: string,\n  error: unknown,\n  errorMessage: string\n): void => {\n  if (error) {\n    toaster.show(\n      {\n        icon: 'warning-sign',\n        intent: 'warning',\n        message:\n          error instanceof ApiError ? (\n            <>\n              {errorMessage}: {error.message}\n              <br />\n              Response: {String(error.response)}\n            </>\n          ) : (\n            `${errorMessage}: ${error}`\n          ),\n      },\n      key\n    );\n  } else {\n    toaster.dismiss(key);\n  }\n};\n\n/**\n * Display an informational toast message.\n * @param message Message to show\n */\nexport const showInfoToast = (message: string): void => {\n  toaster.show({icon: 'info-sign', message});\n};\n\n/**\n * Display a toast message to indicate that the app is saving something.\n * @param key Used to uniquely identify the toast message\n * @param isSaving Whether to show or hide the toast\n * @param message Message to show\n */\nexport const setSavingToast = (\n  key: string,\n  isSaving: boolean,\n  message: string\n): void => {\n  if (isSaving) {\n    toaster.show({icon: 'floppy-disk', intent: 'primary', message}, key);\n  } else {\n    toaster.dismiss(key);\n  }\n};\n","/**\n * @file Utilities that don't quite fit anywhere else.\n */\n\nimport {CleanupAction, ItemInfo} from '@philter/common';\n\n/**\n * Maximum possible mallsell price for any item.\n * This is a limit enforced by KoL.\n */\nexport const MAX_MALL_PRICE = 999_999_999 as const;\n\n/**\n * Zero-width space character. This can be used to allow browsers to break long\n * words across multiple lines, or as an empty placeholder.\n */\nexport const ZWSP = '\\u200B';\n\n/**\n * @param action Cleanup action\n * @return Human-readable short name for the action\n */\nexport const cleanupActionToString = (action: CleanupAction): string => {\n  switch (action) {\n    case 'AUTO':\n      return 'Autosell';\n    case 'BREAK':\n      return 'Break apart';\n    case 'CLAN':\n      return 'Put in clan stash';\n    case 'CLST':\n      return 'Closet';\n    case 'DISC':\n      return 'Discard';\n    case 'DISP':\n      return 'Display';\n    case 'GIFT':\n      return 'Send as gift';\n    case 'KEEP':\n      return 'Keep all';\n    case 'MAKE':\n      return 'Craft';\n    case 'MALL':\n      return 'Mall sale';\n    case 'PULV':\n      return 'Pulverize';\n    case 'TODO':\n      return 'Reminder';\n    case 'UNTN':\n      return 'Untinker';\n    case 'USE':\n      return 'Use';\n    default:\n      // If we forget an action, TypeScript will catch this as a compile error\n      return ((n: never) => n)(action);\n  }\n};\n\n/**\n * @param item Item type to check\n * @return Whether Philter Manager should warn about pulverizing the item\n */\nexport const shouldWarnOnPulverize = (item: Readonly<ItemInfo>): boolean =>\n  !item.isTradable;\n\n/**\n * Identity function that returns the first argument as-is.\n * This is primarily intended to perform compile-time type-checks against union\n * types or enums.\n * **This does NOT perform any runtime type checks!**\n * @param value\n * @return `value` unmodified\n */\nexport const typeCheck = <T>(value: T): T => value;\n","import {Classes} from '@blueprintjs/core';\nimport classNames from 'classnames';\nimport React from 'react';\nimport './NumericInputLite.css';\n\ninterface NumericInputLiteProps extends React.ComponentProps<'input'> {\n  /**\n   * Whether this component should take up the full width of its parent\n   * container.\n   */\n  fill?: boolean;\n  small?: boolean;\n}\n\n/**\n * A thin wrapper for `<input type=\"number\">` that is styled like an\n * `<InputGroup>` from Blueprint.js.\n */\nexport const NumericInputLite = ({\n  className,\n  fill,\n  /**\n   * Whether this input should use \"small\" styles.\n   */\n  small,\n  ...props\n}: NumericInputLiteProps) => (\n  <input\n    className={classNames(\n      'NumericInputLite',\n      Classes.INPUT,\n      small && Classes.SMALL,\n      fill && Classes.FILL,\n      className\n    )}\n    dir=\"auto\"\n    type=\"number\"\n    {...props}\n  />\n);\n","import {Classes, Colors} from '@blueprintjs/core';\nimport {CleanupAction, isCleanupAction, ItemInfo} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo} from 'react';\nimport {shouldWarnOnPulverize, typeCheck} from '../util';\nimport './SelectCleanupAction.css';\n\n/**\n * A fallback value used to denote uncategorized items in the `<select>`.\n */\nexport const UNKNOWN_CLEANUP_ACTION = 'UNKN';\nexport type CleanupActionOrUnknown =\n  | CleanupAction\n  | typeof UNKNOWN_CLEANUP_ACTION;\n\nconst isCleanupActionOrUnknown = (\n  value: unknown\n): value is CleanupActionOrUnknown =>\n  value === UNKNOWN_CLEANUP_ACTION || isCleanupAction(value);\n\ninterface SelectCleanupActionPropsBase {\n  item: Readonly<ItemInfo>;\n  onChange: (value: CleanupActionOrUnknown) => void;\n  value: CleanupActionOrUnknown;\n}\n\ninterface SelectCleanupActionProps\n  extends SelectCleanupActionPropsBase,\n    Omit<React.ComponentProps<'div'>, keyof SelectCleanupActionPropsBase> {}\n\n/**\n * `<select>` element for picking a cleanup action.\n */\n// eslint-disable-next-line prefer-arrow-callback\nexport const SelectCleanupAction = memo(function SelectCleanupAction({\n  className,\n  item,\n  onChange,\n  value,\n  ...restProps\n}: SelectCleanupActionProps) {\n  return (\n    <div\n      className={classNames(\n        Classes.HTML_SELECT,\n        'SelectCleanupAction',\n        className\n      )}\n      {...restProps}\n    >\n      <select\n        onChange={e =>\n          isCleanupActionOrUnknown(e.target.value) && onChange(e.target.value)\n        }\n        value={value}\n      >\n        <option\n          value={typeCheck<CleanupActionOrUnknown>(UNKNOWN_CLEANUP_ACTION)}\n        >\n          (uncategorized)\n        </option>\n        <option value={typeCheck<CleanupActionOrUnknown>('KEEP')}>\n          Keep all\n        </option>\n        {item.canMall && (\n          <option value={typeCheck<CleanupActionOrUnknown>('MALL')}>\n            Mall sale\n          </option>\n        )}\n        {item.canBreak && (\n          <option value={typeCheck<CleanupActionOrUnknown>('BREAK')}>\n            Break apart\n          </option>\n        )}\n        {item.canAutosell && (\n          <option value={typeCheck<CleanupActionOrUnknown>('AUTO')}>\n            Autosell\n          </option>\n        )}\n        {item.canDiscard && (\n          <option\n            style={{color: Colors.ORANGE2}}\n            value={typeCheck<CleanupActionOrUnknown>('DISC')}\n          >\n            Discard\n          </option>\n        )}\n        {item.canGift && (\n          <option value={typeCheck<CleanupActionOrUnknown>('GIFT')}>\n            Send as gift\n          </option>\n        )}\n        {item.canStash && (\n          <option value={typeCheck<CleanupActionOrUnknown>('CLAN')}>\n            Put in clan stash\n          </option>\n        )}\n        {item.canPulverize && (\n          <option\n            style={\n              shouldWarnOnPulverize(item) ? {color: Colors.ORANGE2} : undefined\n            }\n            value={typeCheck<CleanupActionOrUnknown>('PULV')}\n          >\n            Pulverize\n          </option>\n        )}\n        {item.canMake && (\n          <option value={typeCheck<CleanupActionOrUnknown>('MAKE')}>\n            Craft...\n          </option>\n        )}\n        {item.canUntinker && (\n          <option value={typeCheck<CleanupActionOrUnknown>('UNTN')}>\n            Untinker\n          </option>\n        )}\n        {item.canUse && (\n          <option value={typeCheck<CleanupActionOrUnknown>('USE')}>Use</option>\n        )}\n        {item.canCloset && (\n          <option value={typeCheck<CleanupActionOrUnknown>('CLST')}>\n            Closet\n          </option>\n        )}\n        {item.canDisplay && (\n          <option value={typeCheck<CleanupActionOrUnknown>('DISP')}>\n            Display\n          </option>\n        )}\n        <option value={typeCheck<CleanupActionOrUnknown>('TODO')}>\n          Reminder\n        </option>\n      </select>\n    </div>\n  );\n});\n","import {Checkbox, Classes, FormGroup, Intent} from '@blueprintjs/core';\nimport {ItemInfo, CleanupRule} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {useCallback} from 'react';\nimport {MAX_MALL_PRICE, shouldWarnOnPulverize} from '../util';\nimport './CleanupRulePicker.css';\nimport {NumericInputLite} from './NumericInputLite';\nimport {\n  CleanupActionOrUnknown,\n  SelectCleanupAction,\n  UNKNOWN_CLEANUP_ACTION,\n} from './SelectCleanupAction';\n\n// Note: We use one condition per each conditional option, which allows the\n// backend to decide what can be done with each item.\nexport const CleanupRulePicker = ({\n  item,\n  rule,\n  onChange,\n}: {\n  item: Readonly<ItemInfo>;\n  /**\n   * Callback that accepts a new rule, or `null` if the user changed the rule\n   * to \"(uncategorized)\".\n   * The argument is the new rule, or an updater function that takes the\n   * previous rule as argument and returns a new rule.\n   */\n  onChange?: (\n    newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n  ) => void;\n  rule: Readonly<CleanupRule> | null;\n}): JSX.Element => {\n  const handleActionChange = useCallback(\n    (action: CleanupActionOrUnknown) => {\n      if (!onChange) return;\n      onChange(oldRule => {\n        if (action === oldRule?.action) return oldRule;\n\n        // If the action type changes to another action that requires additional\n        // parameters, initialize these parameters.\n        // Note: This means that additional parameters are NOT remembered when\n        // the user switches an action. This may be undesirable...perhaps use\n        // some internal state to maintain this, or let the parent component\n        // handle it?\n        if (action === UNKNOWN_CLEANUP_ACTION) {\n          return null;\n        } else if (action === 'GIFT') {\n          return {...oldRule, action, message: '', recipent: ''};\n        } else if (action === 'MAKE') {\n          return {\n            ...oldRule,\n            action,\n            shouldUseCreatableOnly: false,\n            targetItem: '',\n          };\n        } else if (action === 'MALL') {\n          return {...oldRule, action, minPrice: 0};\n        } else if (action === 'TODO') {\n          return {...oldRule, action, message: ''};\n        } else {\n          return {...oldRule, action};\n        }\n      });\n    },\n    [onChange]\n  );\n\n  let helperText;\n  let intent;\n\n  if (rule) {\n    if (rule.action === 'PULV' && shouldWarnOnPulverize(item)) {\n      helperText = 'You will pulverize an untradable item.';\n      intent = Intent.WARNING;\n    } else if (rule.action === 'DISC') {\n      helperText = 'You will gain no meat from discarding.';\n      intent = Intent.WARNING;\n    }\n  }\n\n  return (\n    <FormGroup\n      className=\"CleanupRulePicker\"\n      helperText={helperText}\n      intent={intent}\n    >\n      {/* Wrap child elements inside a <div>. This separates them from the\n          helper text <div>, which is injected by the outer <FormGroup>.\n          This separation allows the children to be arranged on a single \"row\"\n          with the helper text under them. */}\n      <div className=\"CleanupRulePicker__Inputs\">\n        <SelectCleanupAction\n          className=\"CleanupRulePicker__Child\"\n          item={item}\n          onChange={handleActionChange}\n          value={rule ? rule.action : UNKNOWN_CLEANUP_ACTION}\n        />\n\n        {!rule ? null : rule.action === 'GIFT' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftRecipent\"\n              helperText={!rule.recipent && 'No recipent name'}\n              inline\n              intent={rule.recipent ? undefined : Intent.DANGER}\n              label=\"to\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  !rule.recipent && Classes.INTENT_DANGER,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e => onChange?.({...rule, recipent: e.target.value})}\n                placeholder=\"Player name\"\n                type=\"text\"\n                value={rule.recipent}\n              />\n            </FormGroup>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputGiftMessage\"\n              inline\n              label=\"with\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e => onChange?.({...rule, message: e.target.value})}\n                placeholder=\"Kmail message\"\n                type=\"text\"\n                value={rule.message}\n              />\n            </FormGroup>\n          </>\n        ) : rule.action === 'MAKE' ? (\n          <>\n            <FormGroup\n              className=\"CleanupRulePicker__Child\"\n              contentClassName=\"CleanupRulePicker__InputMakeTarget\"\n              helperText={!rule.targetItem && 'No item name'}\n              inline\n              intent={!rule.targetItem ? Intent.DANGER : undefined}\n              label=\"into\"\n            >\n              <input\n                className={classNames(\n                  Classes.INPUT,\n                  Classes.SMALL,\n                  'CleanupRulePicker__InputText'\n                )}\n                onChange={e =>\n                  onChange?.({...rule, targetItem: e.target.value})\n                }\n                placeholder=\"Item name\"\n                type=\"text\"\n                value={rule.targetItem}\n              />\n            </FormGroup>\n            <Checkbox\n              checked={rule.shouldUseCreatableOnly}\n              className=\"CleanupRulePicker__Child CleanupRulePicker__Checkbox\"\n              onChange={e =>\n                onChange?.({\n                  ...rule,\n                  shouldUseCreatableOnly: e.currentTarget.checked,\n                })\n              }\n            >\n              <span className=\"CleanupRulePicker__CheckBoxText\">\n                Only use available ingredients\n              </span>\n            </Checkbox>\n          </>\n        ) : rule.action === 'MALL' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputMallMinPrice\"\n            inline\n            label=\"min price\"\n          >\n            <NumericInputLite\n              max={MAX_MALL_PRICE}\n              min={0}\n              onChange={event => {\n                const value = Number(event.target.value);\n                if (Number.isInteger(value)) {\n                  onChange?.({\n                    ...rule,\n                    minPrice: Math.max(0, Math.min(MAX_MALL_PRICE, value)),\n                  });\n                }\n              }}\n              value={rule.minPrice}\n            />\n          </FormGroup>\n        ) : rule.action === 'TODO' ? (\n          <FormGroup\n            className=\"CleanupRulePicker__Child\"\n            contentClassName=\"CleanupRulePicker__InputTodoMessage\"\n            inline\n            label=\"with message:\"\n          >\n            <input\n              className={classNames(\n                Classes.INPUT,\n                Classes.SMALL,\n                'CleanupRulePicker__InputText'\n              )}\n              onChange={e => onChange?.({...rule, message: e.target.value})}\n              placeholder=\"Enter reminder message\"\n              type=\"text\"\n              value={rule.message}\n            />\n          </FormGroup>\n        ) : null}\n      </div>\n    </FormGroup>\n  );\n};\n","import {\n  Button,\n  ButtonGroup,\n  Classes,\n  ControlGroup,\n  InputGroup,\n  UL,\n} from '@blueprintjs/core';\nimport {Classes as Popover2Classes, Popover2} from '@blueprintjs/popover2';\nimport {\n  CleanupRule,\n  CleanupRuleset,\n  ItemInfo,\n  ReadonlyCleanupRuleset,\n  ReadonlyInventoryState,\n} from '@philter/common';\nimport classNames from 'classnames';\nimport React, {memo, useCallback, useMemo, useState} from 'react';\nimport {AutoSizer, Column, Table} from 'react-virtualized';\nimport {CleanupRulePicker} from './CleanupRulePicker';\nimport {NumericInputLite} from './NumericInputLite';\nimport './TableItemCleanup.css';\n\n/* eslint-disable react/no-unescaped-entities */\n\n/**\n * Adds a zero-width space (ZWSP) after each comma (`,`) in the given string.\n * This allows the `overflow-wrap: break-word` CSS rule to break long numbers\n * across multiple lines.\n */\nconst addZwspAfterComma = (str: string) => str.replace(/,/g, ',\\u200B');\n\n/**\n * Launches the in-game item description page in a popup window.\n * @param descid Item descid\n */\nconst itemDescriptionPopup = (descid: string) => {\n  window\n    .open(`/desc_item.php?whichitem=${descid}`, 'name', 'height=200,width=214')\n    ?.focus();\n};\n\n/**\n * Tag for items whose mall price is at minimum value.\n *\n * This is a lightweight replica of Blueprint.js's `<Tag>` component.\n */\nconst MinMallPriceTag = () => (\n  <span\n    className={classNames(\n      Classes.TAG,\n      Classes.MINIMAL,\n      Classes.INTENT_PRIMARY,\n      'TableItemCleanup__ColumnMallPrice--minimum'\n    )}\n    title=\"Is at minimum mall price\"\n  >\n    min\n  </span>\n);\n\nexport type RuleChangeHandler = (\n  itemId: number,\n  newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n) => void;\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellItemName = memo(function CellItemName({\n  inventory,\n  item,\n}: {\n  inventory: ReadonlyInventoryState;\n  item: Readonly<ItemInfo>;\n}) {\n  return (\n    <>\n      <a\n        className={classNames(\n          Classes.BUTTON,\n          Classes.MINIMAL,\n          'TableItemCleanup__ItemImageLink'\n        )}\n        onClick={() => itemDescriptionPopup(item.descid)}\n        tabIndex={0}\n        title=\"View item description\"\n      >\n        <img\n          className=\"TableItemCleanup__ItemImage\"\n          alt={item.name}\n          src={`/images/itemimages/${item.image}`}\n        />\n      </a>\n      <a\n        className={classNames(\n          Classes.BUTTON,\n          Classes.MINIMAL,\n          'TableItemCleanup__ItemNameLink'\n        )}\n        href={`https://kol.coldfront.net/thekolwiki/index.php/Special:Search?search=${item.name}&go=Go`}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        tabIndex={0}\n        title=\"Visit KoL wiki page\"\n      >\n        <span dangerouslySetInnerHTML={{__html: item.name}}></span>\n        {inventory.inventory[item.id] > 0 && (\n          <>\n            {' '}\n            <i>({inventory.inventory[item.id]})</i>\n          </>\n        )}\n      </a>\n    </>\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellMallPrice = memo(function CellMallPrice({\n  item,\n}: {\n  item: Readonly<ItemInfo>;\n}) {\n  return (\n    <>\n      {item.mallPrice && addZwspAfterComma(item.mallPrice.toLocaleString())}\n      {item.mallPrice !== null && item.isMallPriceAtMinimum && (\n        <MinMallPriceTag />\n      )}\n    </>\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellKeepAmount = memo(function CellKeepAmount({\n  item,\n  onRuleChange,\n  rule,\n}: {\n  item: Readonly<ItemInfo>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<CleanupRule> | undefined;\n}) {\n  return (\n    <NumericInputLite\n      className=\"TableItemCleanup__InputKeepAmount\"\n      disabled={!rule || rule.action === 'KEEP'}\n      fill\n      min={0}\n      onChange={event => {\n        const value = Number(event.target.value);\n        if (Number.isInteger(value)) {\n          onRuleChange(item.id, rule => rule && {...rule, keepAmount: value});\n        }\n      }}\n      value={rule?.keepAmount || 0}\n    />\n  );\n});\n\n// eslint-disable-next-line prefer-arrow-callback\nconst CellItemAction = memo(function CellItemAction({\n  item,\n  onRuleChange,\n  rule,\n}: {\n  item: Readonly<ItemInfo>;\n  onRuleChange: RuleChangeHandler;\n  rule: Readonly<CleanupRule> | undefined;\n}) {\n  return (\n    <CleanupRulePicker\n      item={item}\n      onChange={newRuleOrReducer => onRuleChange(item.id, newRuleOrReducer)}\n      rule={rule || null}\n    />\n  );\n});\n\ninterface TableItemCleanupPropsBase {\n  /**\n   * Cleanup ruleset.\n   * If an item in `items` does not have a rule here, a default rule (\"UNKN\") is\n   * used.\n   */\n  cleanupRules: ReadonlyCleanupRuleset;\n  /**\n   * Whether the Reset button is disabled.\n   */\n  disableReset?: boolean;\n  /**\n   * Whether the Save button is disabled.\n   */\n  disableSave?: boolean;\n  /** Inventory state. Used to show item quantities for each row. */\n  inventory: ReadonlyInventoryState;\n  /** Items to display in the table. */\n  items: readonly Readonly<ItemInfo>[];\n  /**\n   * Callback that is called when a rule is modified.\n   * The argument is a function that takes the previous ruleset as argument and\n   * returns a new ruleset.\n   *\n   * This implementation is necessary to prevent the entire table from being\n   * re-rendered (causing lag) on every input change.\n   */\n  onChange?: (\n    updater: (prevCleanupRules: CleanupRuleset) => CleanupRuleset\n  ) => void;\n  /**\n   * Called when the user clicks the Reset button.\n   */\n  onReset?: () => void;\n  /**\n   * Called when the user edits a rule for an item.\n   * If not given, the default implementation calls `onChange` instead.\n   */\n  onRuleChange?: RuleChangeHandler;\n  /**\n   * Called when the user clicks the Save button.\n   */\n  onSave?: () => void;\n}\n\ninterface TableItemCleanupProps\n  extends TableItemCleanupPropsBase,\n    Omit<React.ComponentProps<'section'>, keyof TableItemCleanupPropsBase> {}\n\n// eslint-disable-next-line prefer-arrow-callback\nexport const TableItemCleanup = memo(function TableItemCleanup({\n  // className is already provided by React.ComponentProps<'section'>\n  // eslint-disable-next-line react/prop-types\n  className,\n  cleanupRules,\n  disableReset,\n  disableSave,\n  inventory,\n  items,\n  onChange,\n  onReset,\n  onRuleChange,\n  onSave,\n  ...restProps\n}: TableItemCleanupProps) {\n  const defaultRuleChangeHandler = useCallback(\n    (\n      itemId: number,\n      newRuleOrReducer: React.SetStateAction<CleanupRule | null>\n    ) =>\n      onChange?.(prevCleanupRules => {\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [onChange]\n  );\n\n  // Filtering\n  const [filterText, setFilterText] = useState('');\n  const filteredItems = useMemo(() => {\n    if (!filterText) return items;\n    const filterTextLower = filterText.trim().toLowerCase();\n    return items.filter(item =>\n      item.name.toLowerCase().includes(filterTextLower)\n    );\n  }, [filterText, items]);\n\n  const rowGetter = useCallback(\n    ({index}: {index: number}) => filteredItems[index],\n    [filteredItems]\n  );\n\n  const rowClassNameGetter = useCallback(\n    ({index}: {index: number}) =>\n      index === -1 ? 'TableItemCleanup__HeaderRow' : 'TableItemCleanup__Row',\n    []\n  );\n\n  /* eslint-disable react/jsx-key */\n  const columns = useMemo(\n    () => [\n      <Column\n        cellRenderer={({rowData: item}: {rowData: Readonly<ItemInfo>}) => (\n          <CellItemName inventory={inventory} item={item} />\n        )}\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnItemName\"\n        dataKey=\"nameAndImage\"\n        flexGrow={5}\n        flexShrink={0}\n        label=\"Item (Amount)\"\n        width={200}\n      />,\n      <Column\n        cellDataGetter={({rowData: item}: {rowData: Readonly<ItemInfo>}) =>\n          inventory.closet[item.id] || 0\n        }\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnClosetAmount\"\n        dataKey=\"closetAmount\"\n        flexShrink={0}\n        label={<abbr title=\"Amount in Closet\">C</abbr>}\n        width={35}\n      />,\n      <Column\n        cellDataGetter={({rowData: item}: {rowData: Readonly<ItemInfo>}) =>\n          inventory.storage[item.id] || 0\n        }\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnStorageAmount\"\n        dataKey=\"storageAmount\"\n        flexShrink={0}\n        label={<abbr title=\"Amount in Storage\">S</abbr>}\n        width={35}\n      />,\n      <Column\n        cellDataGetter={({rowData: item}: {rowData: Readonly<ItemInfo>}) =>\n          inventory.displayCase[item.id] || 0\n        }\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnDisplayCaseAmount\"\n        dataKey=\"displayCaseAmount\"\n        flexShrink={0}\n        label={<abbr title=\"Amount in Display Case\">D</abbr>}\n        width={35}\n      />,\n      <Column\n        cellRenderer={({rowData: item}: {rowData: Readonly<ItemInfo>}) => (\n          <CellMallPrice item={item} />\n        )}\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnMallPrice\"\n        dataKey=\"mallPrice\"\n        flexGrow={1}\n        flexShrink={0}\n        label={<abbr title=\"5th lowest mall price\">Price</abbr>}\n        width={80}\n      />,\n      <Column\n        cellRenderer={({rowData: item}: {rowData: Readonly<ItemInfo>}) => (\n          <CellKeepAmount\n            item={item}\n            onRuleChange={onRuleChange || defaultRuleChangeHandler}\n            rule={cleanupRules[item.id]}\n          />\n        )}\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnKeepAmount\"\n        dataKey=\"keepAmount\"\n        flexShrink={0}\n        label=\"Keep\"\n        width={70}\n      />,\n      <Column\n        cellRenderer={({rowData: item}: {rowData: Readonly<ItemInfo>}) => (\n          <CellItemAction\n            item={item}\n            onRuleChange={onRuleChange || defaultRuleChangeHandler}\n            rule={cleanupRules[item.id]}\n          />\n        )}\n        className=\"TableItemCleanup__Cell TableItemCleanup__ColumnAction\"\n        dataKey=\"action\"\n        flexGrow={1}\n        flexShrink={0}\n        label=\"Action\"\n        width={440}\n      />,\n    ],\n    [cleanupRules, defaultRuleChangeHandler, inventory, onRuleChange]\n  );\n  /* eslint-enable react/jsx-key */\n\n  const editorButtons = useMemo(\n    () => (\n      <ButtonGroup className=\"TableItemCleanup__EditorButtons\">\n        <Button\n          disabled={disableSave}\n          icon=\"saved\"\n          onClick={onSave}\n          text=\"Save all\"\n        />\n        <Button\n          disabled={disableReset}\n          icon=\"reset\"\n          onClick={onReset}\n          text=\"Discard changes\"\n        />\n        <Popover2\n          className=\"TableItemCleanup__PopperFix\"\n          popoverClassName={Popover2Classes.POPOVER2_CONTENT_SIZING}\n          content={\n            <p>\n              Select an action for each item. These actions will tell Philter\n              how to process each item:\n              <UL>\n                <li>\n                  Philter will warn you about uncategorized items, but will not\n                  touch them.\n                </li>\n                <li>\n                  \"Mall sale\" will use the lowest mall price <i>at cleanup</i>,\n                  but never below the \"min price\".\n                </li>\n                <li>\"Send as gift\" actually uses Kmail, not the gift shop.</li>\n                <li>\n                  \"Crafting\" can use up other ingredients needed for the recipe,\n                  even if you marked them as \"Keep all\".\n                </li>\n                <li>\n                  \"Pulverize\" will send items to Smashbot if you can't use\n                  Pulverize or Malus, but only in aftercore.\n                </li>\n                <li>\n                  \"Reminder\" will show a reminder message during cleanup, but\n                  won't touch the item.\n                </li>\n              </UL>\n            </p>\n          }\n        >\n          <Button icon=\"help\" text=\"Help\" />\n        </Popover2>\n      </ButtonGroup>\n    ),\n    [disableReset, disableSave, onReset, onSave]\n  );\n\n  return (\n    <section\n      className={classNames('TableItemCleanup', className)}\n      {...restProps}\n    >\n      <header className=\"TableItemCleanup__HeaderMenu\">\n        {editorButtons}\n        <ControlGroup className=\"TableItemCleanup__ItemFilterControl\">\n          <div>Filter by:</div>\n          <InputGroup\n            onChange={useCallback(\n              (event: React.ChangeEvent<HTMLInputElement>) =>\n                setFilterText(event.target.value),\n              []\n            )}\n            placeholder=\"Enter item name...\"\n            value={filterText}\n          />\n          <div className=\"TableItemCleanup__ItemFilterBarHelperText\">\n            {filterText &&\n              `${filteredItems.length} / ${items.length} match${\n                filteredItems.length > 1 ? 'es' : ''\n              }`}\n          </div>\n        </ControlGroup>\n      </header>\n      <div className=\"TableItemCleanup__TableWrapper\">\n        <AutoSizer>\n          {({height: measuredHeight, width: measuredWidth}) => (\n            <Table\n              gridClassName=\"TableItemCleanup__Inner\"\n              headerClassName=\"TableItemCleanup__HeaderCell\"\n              headerHeight={30}\n              height={measuredHeight}\n              rowClassName={rowClassNameGetter}\n              rowCount={filteredItems.length}\n              rowGetter={rowGetter}\n              rowHeight={60}\n              width={measuredWidth}\n            >\n              {columns}\n            </Table>\n          )}\n        </AutoSizer>\n      </div>\n      <footer className=\"TableItemCleanup__FooterMenu\">{editorButtons}</footer>\n    </section>\n  );\n});\n","import {H3, NonIdealState, Spinner, Tab, Tabs} from '@blueprintjs/core';\nimport {\n  CleanupRule,\n  CLEANUP_TABLES_CATEGORIZED_ROUTE,\n  ItemInfo,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetCleanupTableCategorized, fetchSaveCleanupRuleset} from '../api';\nimport {setErrorToast, setSavingToast, showInfoToast} from '../toaster';\nimport {cleanupActionToString, typeCheck} from '../util';\nimport './PanelCategorizedItems.css';\nimport {RuleChangeHandler, TableItemCleanup} from './TableItemCleanup';\n\nconst CLEANUP_TAB_TYPES = {\n  all: 0,\n  closet: 0,\n  craft: 0,\n  display: 0,\n  dispose: 0,\n  gift: 0,\n  inventory: 0,\n  keep: 0,\n  mall: 0,\n  pulverize: 0,\n  reminder: 0,\n  search: 0,\n  stash: 0,\n  untinker: 0,\n  use: 0,\n};\n\n/**\n * Note: Tab types do not match cleanup actions 1:1. For example, autosell\n * (AUTO) and discard (DISC) actions are shown together under \"dispose\".\n */\ntype CleanupTabType = keyof typeof CLEANUP_TAB_TYPES;\nconst isCleanupTabType = (tabId: unknown): tabId is CleanupTabType =>\n  typeof tabId === 'string' &&\n  Object.prototype.hasOwnProperty.call(CLEANUP_TAB_TYPES, tabId);\n\nconst categorizeItemsForTabs = (\n  items: readonly Readonly<ItemInfo>[],\n  cleanupRules: ReadonlyCleanupRuleset\n) =>\n  items.reduce(\n    (itemsForTabs, item) => {\n      const rule = cleanupRules[item.id];\n      if (rule) {\n        itemsForTabs.all.push(item);\n        switch (rule.action) {\n          case 'CLST':\n            itemsForTabs.closet.push(item);\n            break;\n          case 'MAKE':\n            itemsForTabs.craft.push(item);\n            break;\n          case 'AUTO':\n          case 'DISC':\n            itemsForTabs.dispose.push(item);\n            break;\n          case 'BREAK':\n          case 'USE':\n            itemsForTabs.use.push(item);\n            break;\n          case 'DISP':\n            itemsForTabs.display.push(item);\n            break;\n          case 'KEEP':\n            itemsForTabs.keep.push(item);\n            break;\n          case 'GIFT':\n            itemsForTabs.gift.push(item);\n            break;\n          case 'MALL':\n            itemsForTabs.mall.push(item);\n            break;\n          case 'PULV':\n            itemsForTabs.pulverize.push(item);\n            break;\n          case 'TODO':\n            itemsForTabs.reminder.push(item);\n            break;\n          case 'UNTN':\n            itemsForTabs.untinker.push(item);\n            break;\n          case 'CLAN':\n            itemsForTabs.stash.push(item);\n            break;\n        }\n      }\n      return itemsForTabs;\n    },\n    {\n      /** This includes only items that have a cleanup rule defined. */\n      all: [] as ItemInfo[],\n      closet: [] as ItemInfo[],\n      craft: [] as ItemInfo[],\n      display: [] as ItemInfo[],\n      dispose: [] as ItemInfo[],\n      gift: [] as ItemInfo[],\n      keep: [] as ItemInfo[],\n      mall: [] as ItemInfo[],\n      pulverize: [] as ItemInfo[],\n      reminder: [] as ItemInfo[],\n      stash: [] as ItemInfo[],\n      untinker: [] as ItemInfo[],\n      use: [] as ItemInfo[],\n    }\n  );\n\n/**\n * Panel for editing the player's Philter ruleset.\n */\nexport const PanelCategorizedItems = ({\n  cleanupRules,\n  onChange,\n}: {\n  /**\n   * Active cleanup ruleset being edited, or `undefined` if the base cleanup\n   * ruleset has not been loaded yet.\n   */\n  cleanupRules: ReadonlyCleanupRuleset | undefined;\n  /** Callback invoked when the active cleanup ruleset is changed */\n  onChange: (\n    newStateOrReducer: React.SetStateAction<ReadonlyCleanupRuleset | undefined>\n  ) => void;\n}): JSX.Element => {\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoading,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_CATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableCategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  // When the data is loaded for the first time, sync the active cleanup ruleset\n  // with the base cleanup ruleset\n  useEffect(() => {\n    if (data?.cleanupRules) {\n      onChange(prevCleanupRules => prevCleanupRules ?? data.cleanupRules);\n    }\n  }, [data?.cleanupRules, onChange]);\n\n  const hasChanges = useMemo(\n    () => Boolean(cleanupRules) && !dequal(cleanupRules, data?.cleanupRules),\n    [cleanupRules, data?.cleanupRules]\n  );\n\n  const handleReset = useCallback(\n    () => data?.cleanupRules && onChange(data.cleanupRules),\n    [data?.cleanupRules, onChange]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      if (!cleanupRules) {\n        throw new Error(\n          'Cannot save active ruleset because it has not been initialized yet'\n        );\n      }\n\n      const response = await fetchSaveCleanupRuleset(cleanupRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {...data, cleanupRules};\n    }, false)\n  );\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const handleRuleChange: RuleChangeHandler = useCallback(\n    (itemId, newRuleOrReducer) =>\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const prevRule: CleanupRule | undefined = prevCleanupRules[itemId];\n        const newRule =\n          typeof newRuleOrReducer === 'function'\n            ? newRuleOrReducer(prevCleanupRules[itemId] || null)\n            : newRuleOrReducer;\n\n        if (prevRule && prevRule.action !== newRule?.action) {\n          const itemName = data?.items.find(item => item.id === itemId)?.name;\n          if (itemName !== undefined) {\n            showInfoToast(\n              newRule\n                ? `Changed action for ${itemName} to \"${cleanupActionToString(\n                    newRule.action\n                  )}\"`\n                : `Removed action for ${itemName}`\n            );\n          }\n        }\n\n        if (newRule) return {...prevCleanupRules, [itemId]: newRule};\n        else {\n          // eslint-disable-next-line @typescript-eslint/no-unused-vars\n          const {[itemId]: _removed, ...restCleanupRules} = prevCleanupRules;\n          return restCleanupRules;\n        }\n      }),\n    [data?.items, onChange]\n  );\n\n  const [tabId, setTabId] = useState<CleanupTabType>('all');\n\n  // Item categories are based on the active copy of the ruleset being edited,\n  // rather than the base copy. This allows the tabs to be updated in real time\n  // when the user edits the ruleset.\n  const itemsForTabs = useMemo(\n    () => categorizeItemsForTabs(data?.items ?? [], cleanupRules || {}),\n    [cleanupRules, data?.items]\n  );\n\n  const isTabAvailable = Object.prototype.hasOwnProperty.call(\n    itemsForTabs,\n    tabId\n  )\n    ? itemsForTabs[tabId as keyof typeof itemsForTabs].length > 0\n    : true;\n  const actualTabId = isTabAvailable ? tabId : 'all';\n\n  const makeItemTable = (items: ItemInfo[]) =>\n    cleanupRules &&\n    data && (\n      <TableItemCleanup\n        className=\"PanelCategorizedItems__Table\"\n        disableReset={!hasChanges}\n        disableSave={!hasChanges}\n        inventory={data.inventory}\n        items={items}\n        cleanupRules={cleanupRules}\n        onRuleChange={handleRuleChange}\n        onReset={handleReset}\n        onSave={handleSave}\n      />\n    );\n\n  return (\n    <>\n      <H3>Edit Cleanup Rules</H3>\n      {data ? (\n        <Tabs\n          className=\"PanelCategorizedItems__Tabs\"\n          onChange={tabId => isCleanupTabType(tabId) && setTabId(tabId)}\n          renderActiveTabPanelOnly\n          selectedTabId={actualTabId}\n        >\n          <Tab\n            id={typeCheck<CleanupTabType>('all')}\n            panel={makeItemTable(itemsForTabs.all)}\n            panelClassName=\"PanelCategorizedItems__TabItem\"\n            title=\"All\"\n          />\n          {itemsForTabs.keep.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('keep')}\n              panel={makeItemTable(itemsForTabs.keep)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Keep\"\n            />\n          )}\n          {itemsForTabs.mall.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('mall')}\n              panel={makeItemTable(itemsForTabs.mall)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Mall\"\n            />\n          )}\n          {itemsForTabs.pulverize.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('pulverize')}\n              panel={makeItemTable(itemsForTabs.pulverize)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Pulverize\"\n            />\n          )}\n          {itemsForTabs.use.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('use')}\n              panel={makeItemTable(itemsForTabs.use)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Use\"\n            />\n          )}\n          {itemsForTabs.closet.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('closet')}\n              panel={makeItemTable(itemsForTabs.closet)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Closet\"\n            />\n          )}\n          {itemsForTabs.stash.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('stash')}\n              panel={makeItemTable(itemsForTabs.stash)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Clan Stash\"\n            />\n          )}\n          {itemsForTabs.craft.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('craft')}\n              panel={makeItemTable(itemsForTabs.craft)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Crafting\"\n            />\n          )}\n          {itemsForTabs.untinker.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('untinker')}\n              panel={makeItemTable(itemsForTabs.untinker)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Untinkering\"\n            />\n          )}\n          {itemsForTabs.gift.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('gift')}\n              panel={makeItemTable(itemsForTabs.gift)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Gift\"\n            />\n          )}\n          {itemsForTabs.display.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('display')}\n              panel={makeItemTable(itemsForTabs.display)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Display\"\n            />\n          )}\n          {itemsForTabs.dispose.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('dispose')}\n              panel={makeItemTable(itemsForTabs.dispose)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Dispose\"\n            />\n          )}\n          {itemsForTabs.reminder.length > 0 && (\n            <Tab\n              id={typeCheck<CleanupTabType>('reminder')}\n              panel={makeItemTable(itemsForTabs.reminder)}\n              panelClassName=\"PanelCategorizedItems__TabItem\"\n              title=\"Reminders\"\n            />\n          )}\n        </Tabs>\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Code, InputGroup} from '@blueprintjs/core';\nimport React, {memo} from 'react';\nimport './InputGroupAffixedFileName.css';\n\ninterface InputGroupAffixedFileNameProps\n  extends React.ComponentProps<typeof InputGroup> {\n  /** File name prefix, if any */\n  fileNamePrefix?: string;\n  /** File name suffix, if any */\n  fileNameSuffix?: string;\n}\n\n/**\n * `InputGroup` for a file name with predefined prefix and/or suffix.\n */\nexport const InputGroupAffixedFileName = memo(\n  // eslint-disable-next-line prefer-arrow-callback\n  function InputGroupAffixedFileName({\n    fileNamePrefix,\n    fileNameSuffix,\n    className = '',\n    ...restProps\n  }: InputGroupAffixedFileNameProps) {\n    return (\n      <InputGroup\n        className={`InputGroupAffixedFileName ${className}`}\n        leftElement={\n          fileNamePrefix ? (\n            <Code className=\"InputGroupAffixedFileName__Prefix\">\n              {fileNamePrefix}\n            </Code>\n          ) : undefined\n        }\n        rightElement={\n          fileNameSuffix ? (\n            <Code className=\"InputGroupAffixedFileName__Suffix\">\n              {fileNameSuffix}\n            </Code>\n          ) : undefined\n        }\n        {...restProps}\n      />\n    );\n  }\n);\n","import {\n  Button,\n  ButtonGroup,\n  Checkbox,\n  Classes,\n  Code,\n  Dialog,\n  Divider,\n  FormGroup,\n  H3,\n  InputGroup,\n  Radio,\n  RadioGroup,\n} from '@blueprintjs/core';\nimport {CONFIG_ROUTE, PhilterConfig} from '@philter/common';\nimport classNames from 'classnames';\nimport {dequal} from 'dequal/lite';\nimport React, {memo, useCallback, useEffect, useState} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {fetchGetPhilterConfig, fetchSavePhilterConfig} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport {MAX_MALL_PRICE, ZWSP} from '../util';\nimport {InputGroupAffixedFileName} from './InputGroupAffixedFileName';\nimport './PanelConfig.css';\n\nconst CLEANUP_RULESET_PREFIX = 'OCDdata_';\nconst STOCKING_RULESET_PREFIX = 'OCDstock_';\nconst TXT_SUFFIX = '.txt';\n\ninterface ChangedFileEntry {\n  /** Label for this entry, shown to the user. */\n  label: string;\n  newName: string;\n  oldName: string;\n}\n\n/**\n * A `<Dialog>` that asks whether to copy over existing data or start fresh when\n * the user changes the name of the ruleset file(s).\n * To properly animate closing transitions, this must be rendered even if the\n * dialog is closed.\n */\n// eslint-disable-next-line prefer-arrow-callback\nconst DialogAskCopyOnSave = memo(function DialogAskCopyOnSave({\n  changedFiles = [],\n  isOpen,\n  onCancel,\n  onSaveWithCopy,\n  onSaveWithoutCopy,\n}: {\n  /** Array of data files changed. */\n  changedFiles?: readonly Readonly<ChangedFileEntry>[];\n  isOpen?: boolean;\n  onCancel?: () => void;\n  onSaveWithCopy?: () => void;\n  onSaveWithoutCopy?: () => void;\n}) {\n  return (\n    <Dialog\n      canEscapeKeyClose\n      canOutsideClickClose\n      icon=\"warning-sign\"\n      isOpen={isOpen}\n      onClose={onCancel}\n      title={`Changing data file name${changedFiles.length > 1 ? 's' : ''}`}\n    >\n      <div className={Classes.DIALOG_BODY}>\n        You are about the change your data file\n        {changedFiles.length > 1 ? \"s' names\" : \"'s name\"}:\n        <ul>\n          {changedFiles.map((entry, index) => (\n            <li key={index}>\n              {entry.label}: <Code>{entry.oldName}</Code> &rArr;{' '}\n              <Code>{entry.newName}</Code>\n            </li>\n          ))}\n        </ul>\n        Do you want to copy the contents of your previous data file\n        {changedFiles.length > 1 && 's'}?\n      </div>\n      <div className={Classes.DIALOG_FOOTER}>\n        <div className={Classes.DIALOG_FOOTER_ACTIONS}>\n          <Button\n            icon=\"duplicate\"\n            text=\"Copy contents\"\n            onClick={onSaveWithCopy}\n          />\n          <Button\n            icon=\"exchange\"\n            text={`Change file name${changedFiles.length > 1 ? 's' : ''} only`}\n            onClick={onSaveWithoutCopy}\n          />\n          <Button intent=\"danger\" text=\"Cancel\" onClick={onCancel} />\n        </div>\n      </div>\n    </Dialog>\n  );\n});\n\n/**\n * Helper function that checks if first value is identical to any of the values\n * in the given array.\n */\nconst isOneOf = <T extends unknown>(\n  value: unknown,\n  compareWith: readonly T[]\n): value is T => compareWith.includes(value as T);\n\nexport const PanelConfig = (): JSX.Element => {\n  const {\n    data: baseConfig,\n    error: loadingError,\n    mutate,\n  } = useSWR(CONFIG_ROUTE, async () => (await fetchGetPhilterConfig()).result);\n\n  const [config, setConfig] = useState<PhilterConfig | null>(null);\n  // When the data is loaded for the first time, synchronize config with\n  // the server-sent config\n  useEffect(() => {\n    if (baseConfig && !config) {\n      setConfig(baseConfig);\n    }\n  }, [baseConfig, config]);\n\n  // Saving config is a complicated process that can open a popup dialog asking\n  // for the user's confirmation\n  // This is why we jump through loops and hoops...\n\n  const [dialogProps, setDialogProps] = useState<\n    React.ComponentProps<typeof DialogAskCopyOnSave>\n  >({});\n  const closeDialog = useCallback(() => setDialogProps({}), []);\n\n  const {\n    loading: isSaving,\n    execute: saveConfig,\n    error: savingError,\n  } = useAsyncCallback(\n    async (config: PhilterConfig, shouldCopyDataFiles?: boolean) => {\n      const response = await fetchSavePhilterConfig(\n        config,\n        shouldCopyDataFiles\n      );\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      mutate(config);\n    }\n  );\n\n  /** Performs some checks before saving the config. */\n  const saveConfigWithCheck = useCallback(\n    async (shouldCopyDataFiles?: boolean) => {\n      // These are logical errors and should never happen.\n      // If they do, we don't want to catch them\n      if (!config) {\n        throw new Error('Cannot save empty config');\n      }\n      if (!baseConfig) {\n        throw new Error('Cannot overwrite an empty config object');\n      }\n\n      const changedFiles: ChangedFileEntry[] = [];\n      if (config.dataFileName !== baseConfig.dataFileName) {\n        changedFiles.push({\n          label: 'Ruleset file',\n          oldName:\n            CLEANUP_RULESET_PREFIX + baseConfig.dataFileName + TXT_SUFFIX,\n          newName: CLEANUP_RULESET_PREFIX + config.dataFileName + TXT_SUFFIX,\n        });\n      }\n      if (config.stockFileName !== baseConfig.stockFileName) {\n        changedFiles.push({\n          label: 'Stock file',\n          oldName:\n            STOCKING_RULESET_PREFIX + baseConfig.stockFileName + TXT_SUFFIX,\n          newName: STOCKING_RULESET_PREFIX + config.stockFileName + TXT_SUFFIX,\n        });\n      }\n\n      // If shouldCopyDataFiles is not explicitly given, display a dialog asking\n      // the user what to do\n      if (changedFiles.length && shouldCopyDataFiles === undefined) {\n        setDialogProps({isOpen: true, changedFiles});\n        return;\n      }\n\n      await saveConfig(config, shouldCopyDataFiles);\n    },\n    [baseConfig, config, saveConfig]\n  );\n\n  const hasChanges = !dequal(config, baseConfig);\n  const setConfigSafe = useCallback(\n    (configOrReducer: React.SetStateAction<PhilterConfig>) =>\n      setConfig(\n        typeof configOrReducer === 'function'\n          ? config => config && configOrReducer(config)\n          : configOrReducer\n      ),\n    []\n  );\n\n  const isDisabled = !baseConfig || !config || isSaving;\n\n  useEffect(\n    () => setErrorToast('loadingError', loadingError, 'Cannot load config'),\n    [loadingError]\n  );\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save config'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving config...'),\n    [isSaving]\n  );\n\n  const isMallMultiInputDisabled = isDisabled || !config?.canUseMallMulti;\n  return (\n    <>\n      <DialogAskCopyOnSave\n        onCancel={() => closeDialog()}\n        onSaveWithCopy={() => {\n          closeDialog();\n          saveConfigWithCheck(true);\n        }}\n        onSaveWithoutCopy={() => {\n          closeDialog();\n          saveConfigWithCheck(false);\n        }}\n        {...dialogProps}\n      />\n      <H3>Configure Philter</H3>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">General settings</legend>\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Empty closet first before cleanup:\"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              const emptyClosetMode = Number(value);\n              if (isOneOf(emptyClosetMode, [0, -1] as const)) {\n                setConfigSafe(config => ({...config, emptyClosetMode}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.emptyClosetMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Never\"\n            value={0}\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Before Emptying Hangk's (recommended)\"\n            value={-1}\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <RadioGroup\n          disabled={isDisabled}\n          inline\n          label=\"Mall pricing: \"\n          onChange={useCallback(\n            ({currentTarget: {value}}) => {\n              if (isOneOf(value, ['auto', 'max'] as const)) {\n                setConfigSafe(config => ({...config, mallPricingMode: value}));\n              }\n            },\n            [setConfigSafe]\n          )}\n          selectedValue={config?.mallPricingMode}\n        >\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label=\"Automatic\"\n            value=\"auto\"\n          />\n          <Radio\n            className={!config ? Classes.SKELETON : undefined}\n            label={`${MAX_MALL_PRICE.toLocaleString()} meat (ignores \"min price\")`}\n            value=\"max\"\n          />\n        </RadioGroup>\n\n        <Divider className=\"PanelConfig__Divider\" />\n\n        <Checkbox\n          checked={Boolean(config?.simulateOnly)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, simulateOnly: checked}))\n          }\n        >\n          Simulate only <small>(no items will be cleaned up)</small>\n        </Checkbox>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Mall multi setup</legend>\n        <Checkbox\n          checked={Boolean(config?.canUseMallMulti)}\n          className={!config ? Classes.SKELETON : undefined}\n          disabled={isDisabled}\n          onChange={({currentTarget: {checked}}) =>\n            setConfigSafe(config => ({...config, canUseMallMulti: checked}))\n          }\n        >\n          Use mall multi\n        </Checkbox>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isMallMultiInputDisabled}\n          inline\n          intent={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'warning'\n              : undefined\n          }\n          label=\"Mall multi name:\"\n          helperText={\n            !isMallMultiInputDisabled && !config?.mallMultiName\n              ? 'No multi account'\n              : ZWSP\n          }\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isMallMultiInputDisabled}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({...config, mallMultiName: value}))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter player name'}\n            value={config?.mallMultiName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled || !config?.canUseMallMulti}\n          inline\n          label=\"Mall multi Kmail text:\"\n        >\n          <InputGroup\n            className={!config ? Classes.SKELETON : undefined}\n            disabled={isDisabled || !config?.canUseMallMulti}\n            onChange={({target: {value}}) =>\n              setConfigSafe(config => ({\n                ...config,\n                mallMultiKmailMessage: value,\n              }))\n            }\n            placeholder={isMallMultiInputDisabled ? '' : 'Enter Kmail message'}\n            value={config?.mallMultiKmailMessage || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <fieldset className=\"PanelConfig__Section\">\n        <legend className=\"PanelConfig__SectionTitle\">Data files</legend>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Ruleset file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={CLEANUP_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, dataFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.dataFileName || ''}\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"PanelConfig__FormGroupAligned\"\n          disabled={isDisabled}\n          inline\n          label=\"Stock file:\"\n        >\n          <InputGroupAffixedFileName\n            className={classNames(\n              'PanelConfig_InputFileName',\n              !config && Classes.SKELETON\n            )}\n            disabled={isDisabled}\n            fileNamePrefix={STOCKING_RULESET_PREFIX}\n            fileNameSuffix={TXT_SUFFIX}\n            onChange={useCallback(\n              ({target: {value}}) =>\n                setConfigSafe(config => ({...config, stockFileName: value})),\n              [setConfigSafe]\n            )}\n            value={config?.stockFileName || ''}\n          />\n        </FormGroup>\n      </fieldset>\n\n      <ButtonGroup>\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"floppy-disk\"\n          onClick={useCallback(\n            () => saveConfigWithCheck(),\n            [saveConfigWithCheck]\n          )}\n          text=\"Save\"\n        />\n        <Button\n          disabled={isDisabled || !hasChanges}\n          icon=\"reset\"\n          onClick={useCallback(\n            () => baseConfig && setConfig(baseConfig),\n            [baseConfig]\n          )}\n          text=\"Discard changes\"\n        />\n      </ButtonGroup>\n    </>\n  );\n};\n","/**\n * @file Defines requests and responses for Philter settings.\n */\nexport const CONFIG_ROUTE = '/config';\n//# sourceMappingURL=config.js.map","import {\n  Callout,\n  Colors,\n  H3,\n  HTMLTable,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {STATISTICS_ROUTE} from '@philter/common';\nimport React, {useMemo} from 'react';\nimport useSWR from 'swr';\nimport {fetchGetStatistics} from '../api';\nimport './PanelInformation.css';\n\nconst BULLET = <span className=\"PanelInformation__Bullet\">&#8943;</span>;\n\n/**\n * Panel that acts as the \"home page\", and displays general information about\n * the player's cleanup rules.\n */\nexport const PanelInformation = (): JSX.Element => {\n  const {\n    data,\n    isValidating: isLoading,\n    error: loadingError,\n  } = useSWR(STATISTICS_ROUTE, async () => (await fetchGetStatistics()).result);\n\n  const categorizedCount = useMemo(\n    () =>\n      data\n        ? Object.values(data.categorizedItemCounts).reduce(\n            (acc, sum) => acc + sum\n          )\n        : 0,\n    [data]\n  );\n\n  return (\n    <div>\n      <H3>\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society/Philter\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Philter Manager\n        </a>\n      </H3>\n      <p>\n        Brought to you by{' '}\n        <a\n          href=\"https://github.com/Loathing-Associates-Scripting-Society\"\n          rel=\"noopener noreferrer\"\n          target=\"_blank\"\n        >\n          Loathing Associates Scripting Society\n        </a>\n      </p>\n      <Callout intent=\"warning\" title=\"Manager v2 is in alpha\">\n        Using this <i>may</i> destroy your Philter configuration. Use at your\n        own risk.\n        <br />\n        The{' '}\n        <a href=\"/relay_Philter_Manager_classic.ash?relay=true\">\n          classic UI\n        </a>{' '}\n        is still available.\n      </Callout>\n      {data ? (\n        categorizedCount > 0 ? (\n          <HTMLTable\n            bordered\n            className=\"PanelInformation__VerticalTable\"\n            condensed\n          >\n            <tbody>\n              <tr>\n                <th\n                  style={\n                    data.uncategorizedItemCount > 0\n                      ? {color: Colors.ORANGE1}\n                      : undefined\n                  }\n                >\n                  Uncategorized (in inventory)\n                </th>\n                <td\n                  style={\n                    data.uncategorizedItemCount > 0\n                      ? {color: Colors.ORANGE1}\n                      : undefined\n                  }\n                >\n                  {data.uncategorizedItemCount}\n                </td>\n              </tr>\n              <tr>\n                <th>Items in Ruleset</th>\n                <td>{categorizedCount}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Keep All</th>\n                <td>{data.categorizedItemCounts.KEEP}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Mallsell</th>\n                <td>{data.categorizedItemCounts.MALL}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Autosell/Discard</th>\n                <td>\n                  {data.categorizedItemCounts.AUTO +\n                    data.categorizedItemCounts.DISC}\n                </td>\n              </tr>\n              <tr>\n                <th>{BULLET} Pulverize</th>\n                <td>{data.categorizedItemCounts.PULV}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Use or break</th>\n                <td>\n                  {data.categorizedItemCounts.BREAK +\n                    data.categorizedItemCounts.USE}\n                </td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in closet</th>\n                <td>{data.categorizedItemCounts.CLST}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in clan stash</th>\n                <td>{data.categorizedItemCounts.CLAN}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Crafting</th>\n                <td>{data.categorizedItemCounts.MAKE}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Untinker</th>\n                <td>{data.categorizedItemCounts.UNTN}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Send as gift</th>\n                <td>{data.categorizedItemCounts.GIFT}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Put in display case</th>\n                <td>{data.categorizedItemCounts.DISP}</td>\n              </tr>\n              <tr>\n                <th>{BULLET} Remind me later</th>\n                <td>{data.categorizedItemCounts.TODO}</td>\n              </tr>\n            </tbody>\n          </HTMLTable>\n        ) : (\n          <NonIdealState\n            icon=\"help\"\n            description='If this is your first time using Philter, you can create cleanup rules for your items in the \"Add Items\" tab.'\n            title=\"Your Philter ruleset is empty or missing.\"\n          />\n        )\n      ) : isLoading ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </div>\n  );\n};\n","/**\n * @file Endpoint for general statistics about Philter.\n */\nexport const STATISTICS_ROUTE = '/statistics';\n//# sourceMappingURL=statistics.js.map","import {\n  Button,\n  ButtonGroup,\n  FormGroup,\n  H3,\n  NonIdealState,\n  Spinner,\n} from '@blueprintjs/core';\nimport {\n  CleanupRuleset,\n  CLEANUP_TABLES_UNCATEGORIZED_ROUTE,\n  ReadonlyCleanupRuleset,\n} from '@philter/common';\nimport {dequal} from 'dequal/lite';\nimport React, {useCallback, useEffect, useMemo} from 'react';\nimport {useAsyncCallback} from 'react-async-hook';\nimport useSWR from 'swr';\nimport {\n  fetchGetCleanupTableUncategorized,\n  fetchSaveCleanupRuleset,\n} from '../api';\nimport {setErrorToast, setSavingToast} from '../toaster';\nimport './PanelUncategorizedItems.css';\nimport {TableItemCleanup} from './TableItemCleanup';\n\nexport const PanelUncategorizedItems = ({\n  cleanupRules,\n  onChange,\n}: {\n  /**\n   * Active cleanup ruleset being edited, or `undefined` if the base cleanup\n   * ruleset has not been loaded yet.\n   */\n  cleanupRules: ReadonlyCleanupRuleset | undefined;\n  /** Callback invoked when the active cleanup ruleset is changed */\n  onChange: (\n    newStateOrReducer: React.SetStateAction<ReadonlyCleanupRuleset | undefined>\n  ) => void;\n}): JSX.Element => {\n  // Major assumptions:\n  //\n  // - data.items contains _only_ items that are uncategorized, i.e. the server\n  //   performs the filtering for us.\n  const {\n    data,\n    error: loadingError,\n    isValidating: isLoadingData,\n    mutate,\n  } = useSWR(CLEANUP_TABLES_UNCATEGORIZED_ROUTE, async () => {\n    const response = await fetchGetCleanupTableUncategorized();\n    // Items must be sorted by ID\n    response.result.items.sort((itemA, itemB) => itemA.id - itemB.id);\n    return response.result;\n  });\n\n  // When the data is loaded for the first time, sync the active cleanup ruleset\n  // with the base cleanup ruleset\n  useEffect(() => {\n    if (data?.cleanupRules) {\n      onChange(prevCleanupRules => prevCleanupRules ?? data.cleanupRules);\n    }\n  }, [data?.cleanupRules, onChange]);\n\n  const hasChanges = useMemo(\n    () => Boolean(cleanupRules) && !dequal(cleanupRules, data?.cleanupRules),\n    [cleanupRules, data?.cleanupRules]\n  );\n\n  const handleReset = useCallback(\n    () => data?.cleanupRules && onChange(data.cleanupRules),\n    [data?.cleanupRules, onChange]\n  );\n\n  const {\n    error: savingError,\n    execute: handleSave,\n    loading: isSaving,\n  } = useAsyncCallback(() =>\n    mutate(async data => {\n      if (!data) {\n        throw new Error(\"Cannot save ruleset when we don't have any data yet\");\n      }\n      if (!cleanupRules) {\n        throw new Error(\n          'Cannot save active ruleset because it has not been initialized yet'\n        );\n      }\n\n      const response = await fetchSaveCleanupRuleset(cleanupRules);\n      if (!response?.result?.success) {\n        throw new Error(`Unexpected response: ${JSON.stringify(response)}`);\n      }\n      return {\n        ...data,\n        items: data.items.filter(item => !(item.id in cleanupRules)),\n        cleanupRules,\n      };\n    }, false)\n  );\n\n  useEffect(\n    () => setErrorToast('savingError', savingError, 'Cannot save cleanup rule'),\n    [savingError]\n  );\n  useEffect(\n    () => setSavingToast('isSaving', isSaving, 'Saving cleanup rules...'),\n    [isSaving]\n  );\n\n  const setAllItemsToMall = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          if (item.canMall) {\n            cleanupRules[item.id] = {action: 'MALL', minPrice: 0};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n  const setAllItemsToCloset = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          if (item.canCloset) {\n            cleanupRules[item.id] = {action: 'CLST'};\n          }\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n  const setAllItemsToKeep = useCallback(\n    () =>\n      data &&\n      onChange(prevCleanupRules => {\n        if (prevCleanupRules === undefined) return prevCleanupRules;\n\n        const {...cleanupRules}: CleanupRuleset = prevCleanupRules;\n        for (const item of data.items) {\n          cleanupRules[item.id] = {action: 'KEEP'};\n        }\n        return cleanupRules;\n      }),\n    [data, onChange]\n  );\n\n  const handleCleanupRulesetChange = useCallback(\n    (newRulesOrReducer: React.SetStateAction<CleanupRuleset>) =>\n      onChange(prevCleanupRules =>\n        prevCleanupRules\n          ? typeof newRulesOrReducer === 'function'\n            ? newRulesOrReducer(prevCleanupRules)\n            : newRulesOrReducer\n          : prevCleanupRules\n      ),\n    [onChange]\n  );\n\n  return (\n    <>\n      <H3>Uncategorized Items in Your Inventory</H3>\n      {cleanupRules && data ? (\n        data.items.length > 0 ? (\n          <>\n            <FormGroup inline label=\"Categorize all items as...\">\n              <ButtonGroup>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canMall && cleanupRules[item.id]?.action !== 'MALL'\n                    )\n                  }\n                  onClick={setAllItemsToMall}\n                >\n                  Mallsell\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item =>\n                        item.canCloset &&\n                        cleanupRules[item.id]?.action !== 'CLST'\n                    )\n                  }\n                  onClick={setAllItemsToCloset}\n                >\n                  Closet\n                </Button>\n                <Button\n                  disabled={\n                    !data.items.some(\n                      item => cleanupRules[item.id]?.action !== 'KEEP'\n                    )\n                  }\n                  onClick={setAllItemsToKeep}\n                >\n                  Keep all\n                </Button>\n              </ButtonGroup>\n            </FormGroup>\n            <TableItemCleanup\n              className=\"PanelUncategorizedItems__Table\"\n              disableReset={!hasChanges}\n              disableSave={!hasChanges}\n              inventory={data.inventory}\n              items={data.items}\n              cleanupRules={cleanupRules}\n              onChange={handleCleanupRulesetChange}\n              onReset={handleReset}\n              onSave={handleSave}\n            />\n          </>\n        ) : (\n          <NonIdealState\n            icon={\n              <img\n                alt=\"Nothing to do\"\n                src=\"/images/adventureimages/kg_accountant.gif\"\n              />\n            }\n            title=\"Your entire inventory has been categorized\"\n            description='\"Nothing to see here, please move along.\"'\n          />\n        )\n      ) : isLoadingData ? (\n        <Spinner />\n      ) : (\n        <NonIdealState\n          icon={loadingError ? 'error' : 'info-sign'}\n          title={loadingError ? 'Failed to load data' : 'Data not loaded yet'}\n          description={\n            loadingError instanceof Error ? loadingError.message : undefined\n          }\n        />\n      )}\n    </>\n  );\n};\n","import {Tab, Tabs} from '@blueprintjs/core';\nimport {CleanupRuleset} from '@philter/common';\nimport React, {useState} from 'react';\nimport './App.css';\nimport {PanelCategorizedItems} from './components/PanelCategorizedItems';\nimport {PanelConfig} from './components/PanelConfig';\nimport {PanelInformation} from './components/PanelInformation';\nimport {PanelUncategorizedItems} from './components/PanelUncategorizedItems';\nimport {typeCheck} from './util';\n\nconst MainTabs = Object.freeze({\n  categorized: 0,\n  config: 0,\n  information: 0,\n  uncategorized: 0,\n});\ntype MainTabType = keyof typeof MainTabs;\nconst DEFAULT_TAB = 'information';\n\n/**\n * Ensures that the given tab ID is a valid tab ID.\n * @param tabId Tab ID to check\n * @return Returns the original value of `tabId` if it is a valid tab ID.\n *    Otherwise, returns an appropriate default tab ID as fallback.\n */\nconst ensureValidTabType = (tabId: number | string): MainTabType =>\n  Object.prototype.hasOwnProperty.call(MainTabs, tabId)\n    ? (tabId as MainTabType)\n    : DEFAULT_TAB;\n\nexport const App = (): JSX.Element => {\n  const [tabId, setTabId] = useState<MainTabType>(DEFAULT_TAB);\n\n  // Global edit state persisted across categorized and uncategorized item tabs\n  const [activeCleanupRules, setActiveCleanupRules] = useState<\n    CleanupRuleset | undefined\n  >();\n\n  return (\n    <div className=\"App\">\n      <Tabs\n        className=\"App__Tabs\"\n        id=\"mainTabs\"\n        onChange={tabId => setTabId(ensureValidTabType(tabId))}\n        renderActiveTabPanelOnly\n        selectedTabId={ensureValidTabType(tabId)}\n      >\n        <Tab\n          id={typeCheck<MainTabType>('information')}\n          panel={<PanelInformation />}\n          panelClassName=\"App__TabItem\"\n          title=\"Information\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('uncategorized')}\n          panel={\n            <PanelUncategorizedItems\n              cleanupRules={activeCleanupRules}\n              onChange={setActiveCleanupRules}\n            />\n          }\n          panelClassName=\"App__TabItem\"\n          title=\"Add Items\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('categorized')}\n          panel={\n            <PanelCategorizedItems\n              cleanupRules={activeCleanupRules}\n              onChange={setActiveCleanupRules}\n            />\n          }\n          panelClassName=\"App__TabItem\"\n          title=\"Edit Rules\"\n        />\n        <Tab\n          id={typeCheck<MainTabType>('config')}\n          panel={<PanelConfig />}\n          panelClassName=\"App__TabItem\"\n          title=\"Configuration\"\n        />\n      </Tabs>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"names":["_cleanupActions","Object","freeze","AUTO","BREAK","CLAN","CLST","DISC","DISP","GIFT","KEEP","MAKE","MALL","PULV","TODO","UNTN","USE","Error","constructor","message","code","response","ApiError","prototype","name","fetchFromApi","async","path","method","body","preparedRequest","request","serializedRequest","key","keys","value","serializedValue","JSON","stringify","prepareRequestForSerialization","__spreadValues","fetchResponse","fetch","URLSearchParams","ok","text","e","error","statusText","status","json","fetchSaveCleanupRuleset","cleanupRules","toaster","Toaster","create","maxToasts","setErrorToast","errorMessage","show","icon","intent","String","dismiss","setSavingToast","isSaving","shouldWarnOnPulverize","item","isTradable","NumericInputLite","_a","className","fill","small","_b","props","classNames","Classes.INPUT","Classes.SMALL","Classes.FILL","dir","type","isCleanupActionOrUnknown","hasOwnProperty","call","isCleanupAction","SelectCleanupAction","memo","_c","onChange","_d","restProps","Classes.HTML_SELECT","target","canMall","canBreak","canAutosell","canDiscard","style","color","Colors","ORANGE2","canGift","canStash","canPulverize","canMake","canUntinker","canUse","canCloset","canDisplay","CleanupRulePicker","rule","handleActionChange","useCallback","action","oldRule","__spreadProps","recipent","shouldUseCreatableOnly","targetItem","minPrice","helperText","Intent","WARNING","FormGroup","contentClassName","inline","DANGER","label","Classes.INTENT_DANGER","placeholder","Checkbox","checked","currentTarget","max","min","Number","event","isInteger","Math","MinMallPriceTag","Classes.TAG","Classes.MINIMAL","Classes.INTENT_PRIMARY","title","CellItemName","inventory","Classes.BUTTON","onClick","itemDescriptionPopup","descid","open","focus","tabIndex","alt","src","image","href","rel","dangerouslySetInnerHTML","__html","id","CellMallPrice","mallPrice","toLocaleString","replace","isMallPriceAtMinimum","CellKeepAmount","onRuleChange","disabled","rule2","keepAmount","CellItemAction","newRuleOrReducer","TableItemCleanup","_e","disableReset","disableSave","items","onReset","onSave","_f","defaultRuleChangeHandler","itemId","newRule","prevCleanupRules","_removed","__restKey","filterText","setFilterText","useState","filteredItems","useMemo","filterTextLower","trim","toLowerCase","filter","includes","rowGetter","index","index2","rowClassNameGetter","columns","Column","cellRenderer","rowData","dataKey","flexGrow","flexShrink","width","cellDataGetter","closet","storage","displayCase","editorButtons","ButtonGroup","Button","Popover2","popoverClassName","Popover2Classes.POPOVER2_CONTENT_SIZING","content","UL","ControlGroup","InputGroup","length","AutoSizer","height","measuredHeight","measuredWidth","Table","gridClassName","headerClassName","headerHeight","rowClassName","rowCount","rowHeight","CLEANUP_TAB_TYPES","all","craft","display","dispose","gift","keep","mall","pulverize","reminder","search","stash","untinker","use","PanelCategorizedItems","data","loadingError","isValidating","isLoading","mutate","useSWR","result","sort","itemA","itemB","hasChanges","Boolean","dequal","handleReset","savingError","execute","handleSave","loading","useAsyncCallback","data2","success","handleRuleChange","prevRule","itemName","find","cleanupActionToString","tabId","setTabId","itemsForTabs","reduce","push","actualTabId","makeItemTable","H3","Tabs","isCleanupTabType","tabId2","renderActiveTabPanelOnly","selectedTabId","Tab","panel","panelClassName","Spinner","NonIdealState","description","InputGroupAffixedFileName","_g","fileNamePrefix","fileNameSuffix","_h","leftElement","Code","rightElement","DialogAskCopyOnSave","changedFiles","isOpen","onCancel","onSaveWithCopy","onSaveWithoutCopy","Dialog","canEscapeKeyClose","canOutsideClickClose","onClose","Classes.DIALOG_BODY","map","entry","oldName","newName","Classes.DIALOG_FOOTER","Classes.DIALOG_FOOTER_ACTIONS","isOneOf","compareWith","PanelConfig","baseConfig","config","setConfig","dialogProps","setDialogProps","closeDialog","saveConfig","config2","shouldCopyDataFiles","fetchSavePhilterConfig","saveConfigWithCheck","dataFileName","stockFileName","setConfigSafe","configOrReducer","isDisabled","isMallMultiInputDisabled","canUseMallMulti","RadioGroup","emptyClosetMode","selectedValue","Radio","Classes.SKELETON","Divider","mallPricingMode","simulateOnly","mallMultiName","mallMultiKmailMessage","BULLET","PanelInformation","categorizedCount","values","categorizedItemCounts","acc","sum","Callout","HTMLTable","bordered","condensed","uncategorizedItemCount","ORANGE1","PanelUncategorizedItems","isLoadingData","setAllItemsToMall","cleanupRules2","setAllItemsToCloset","setAllItemsToKeep","handleCleanupRulesetChange","newRulesOrReducer","some","MainTabs","categorized","information","uncategorized","ensureValidTabType","App","activeCleanupRules","setActiveCleanupRules","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"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"}