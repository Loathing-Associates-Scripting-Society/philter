.TableItemCleanup {
  --TableItemCleanup-border-color: rgb(0 0 0 / 15%);

  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.TableItemCleanup__HeaderMenu {
  display: flex;
}

.TableItemCleanup__HeaderMenu > * + * {
  margin-left: 1em;
}

/* Need specificity > (0, 1, 0) to override Blueprint's styling */
.TableItemCleanup .TableItemCleanup__ItemFilterControl {
  align-items: center;
}

.TableItemCleanup__ItemFilterControl > * + * {
  margin-left: 0.5em;
}

.TableItemCleanup__ItemFilterBarHelperText {
  color: #0e5a8a; /* @blue1 */
  width: 10em;
}

/* Extra <div> that wraps <AutoSizer> to make flex functionality work.
   For an explanation of why this wrapper is needed, see:
   https://github.com/bvaughn/react-virtualized/blob/master/docs/usingAutoSizer.md
 */
.TableItemCleanup__TableWrapper {
  border: 1px solid var(--TableItemCleanup-border-color);
  margin-bottom: 0.5em;
  margin-top: 0.5em;
  /* Prevent table from shrinking too much. If the viewport becomes too narrow,
     a horizontal scrollbar should appear on the viewport, not here. */
  min-width: 900px;
  flex-grow: 1;
}

.TableItemCleanup__Inner {
  /* Always show vertical scrollbar in virtualized table, in order to make the
     layout more consistent. */
  overflow-y: scroll !important;
}

.TableItemCleanup__HeaderRow,
.TableItemCleanup__Row {
  border-bottom: 1px solid var(--TableItemCleanup-border-color);
  display: flex;
}

.TableItemCleanup__HeaderCell {
  font-weight: 600;
}

.TableItemCleanup__Cell,
.TableItemCleanup__HeaderCell {
  padding: 3px;
}

* + .TableItemCleanup__Cell,
* + .TableItemCleanup__HeaderCell {
  border-left: 1px solid var(--TableItemCleanup-border-color);
}

.TableItemCleanup__HeaderCell[aria-sort] {
  cursor: pointer;
  user-select: none;
}

.TableItemCleanup__HeaderCell[aria-sort]:hover {
  background-color: #eee;
}

.TableItemCleanup__HeaderCell[aria-sort]:active {
  background-color: #ccc;
}

.TableItemCleanup__HeaderCell > * + * {
  margin-left: 3px;
}

.TableItemCleanup__Cell.TableItemCleanup__Cell--Sorted,
.TableItemCleanup__HeaderCell[aria-sort]:not([aria-sort='none']) {
  background-color: #f4fcdb;
}

.TableItemCleanup__HeaderCell[aria-sort]:not([aria-sort='none']):hover {
  background-color: #d1f26d; /* @lime5 */
}

.TableItemCleanup__HeaderCell[aria-sort]:not([aria-sort='none']):active {
  background-color: #b6d94c; /* @lime4 */
}

.TableItemCleanup__ColumnItemName {
  /* Don't vertically stretch the item icon and buttons */
  align-items: center;
  /* Use flexbox to ensure that the item name always appears to the right of the
     icon, even if the item name is very long */
  display: flex;
}

.TableItemCleanup__ColumnInventoryAmount,
.TableItemCleanup__ColumnClosetAmount,
.TableItemCleanup__ColumnStorageAmount,
.TableItemCleanup__ColumnDisplayCaseAmount {
  text-align: right;
}

.TableItemCleanup__ColumnMallPrice {
  /* Ensure that both the price and the "min" tag are right-aligned, instead of
     stretching to the right end of the cell
   */
  align-items: flex-end;
  display: flex;
  /* Ensure that the "min" tag appears below the price */
  flex-direction: column;
  /* Break long price numbers across multiple lines */
  overflow-wrap: break-word;
  /* When long price numbers are broken across multiple lines, ensure that they
     are right-aligned as well. */
  text-align: right;
}

/* Need specificity > (0, 2, 0) to override Blueprint's styling */
.TableItemCleanup .TableItemCleanup__Cell .TableItemCleanup__ItemImageLink,
.TableItemCleanup .TableItemCleanup__Cell .TableItemCleanup__ItemNameLink {
  padding: 3px;
}

.TableItemCleanup__ItemImage {
  display: block;
  height: 30px;
  /* If the image fails to load, don't let the alt text overflow */
  overflow: hidden;
  width: 30px;
}

/* Need specificity > (0, 1, 1) to override Blueprint's styling */
.TableItemCleanup .TableItemCleanup__ItemNameLink {
  /* Adjustment to vertically align the item icon and name */
  /* align-self: center; */
  text-align: start;
}

.TableItemCleanup__InputKeepAmount {
  text-align: right;
}

/* Need specificity > (0, 2, 0) to override Blueprint's styling */
.TableItemCleanup
  .TableItemCleanup__EditorButtons
  .TableItemCleanup__PopperFix {
  /* Due to flexbox layout, the <span> injected by the <Popover2> component
     grows wider than it should, resulting in incorrect placement of the  popup
     help message. This fixes it by preventing flex growth. */
  flex-grow: 0;
}
